name: Build OpenWrt with ImageBuilder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: false
        default: "openwrt:23.05.5"
        type: choice
        options:
          - openwrt:24.10.0-rc5
          - immortalwrt:24.10.0-rc3
          - immortalwrt:23.05.4
          - openwrt:23.05.5
      target:
        description: "Select device target:"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - Amlogic HG680P
          - Amlogic B860H-V5
          - Amlogic B860H-V1-V2
      notiftele:
        description: "Notif To Telegram:"
        required: true
        default: "true"
        type: choice
        options:
          - true
          - false

env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: imagebuilder.sh
  DEBIAN_FRONTEND: noninteractive
  PYTHONUNBUFFERED: 1

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
            targets=('Raspberry Pi 3B' 'Raspberry Pi 4B' 'NanoPi R2C' 'NanoPi R2S' 'NanoPi R4S' 'Orange Pi R1 Plus' 'Orange Pi R1 Plus LTS' 'x86-64' 'Amlogic HG680P' 'Amlogic B860H-V5' 'Amlogic B860H-V1-V2')
          else
            targets=("${{ inputs.target }}")
          fi
          echo "target=$(jq -nc '$ARGS.positional' --args "${targets[@]}")" >> $GITHUB_OUTPUT

  build:
    needs: prebuild
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id == github.event.sender.id }}
    name: "${{ matrix.target }}"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Changelog
        id: changelog
        run: |
          changelog=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Build Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install \
            build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc \
            rsync wget unzip tar gzip qemu-utils mkisofs \
            jq python3 python3-pip
          pip install telethon colorama
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "DATE=$(date +'%d%m%Y')" >> $GITHUB_ENV

      - name: Configure Target Variables
        id: config
        run: |
          declare -A target_configs=(
            ["Raspberry Pi 3B"]="rpi-3:openwrt_rpi-3"
            ["Raspberry Pi 4B"]="rpi-4:openwrt_rpi-4"
            ["NanoPi R2C"]="friendlyarm_nanopi-r2c:openwrt_friendlyarm_nanopi-r2c"
            ["NanoPi R2S"]="friendlyarm_nanopi-r2s:openwrt_friendlyarm_nanopi-r2s"
            ["NanoPi R4S"]="friendlyarm_nanopi-r4s:openwrt_friendlyarm_nanopi-r4s"
            ["Orange Pi R1 Plus"]="xunlong_orangepi-r1-plus:openwrt_xunlong_orangepi-r1-plus"
            ["Orange Pi R1 Plus LTS"]="xunlong_orangepi-r1-plus-lts:openwrt_xunlong_orangepi-r1-plus-lts"
            ["x86-64"]="generic:openwrt_generic"
          )
          
          amlogic_configs=(
            ["Amlogic HG680P"]="amlogic:s905x:openwrt_amlogic_s905x"
            ["Amlogic B860H-V5"]="amlogic:s905x-b860h:openwrt_amlogic_s905x-b860h"
            ["Amlogic B860H-V1-V2"]="amlogic:s905x2:openwrt_amlogic_s905x2"
          )
          
          if [[ -n "${target_configs[${{ matrix.target }}]}" ]]; then
            IFS=: read -r target_name tag_name <<< "${target_configs[${{ matrix.target }}]}"
          elif [[ -n "${amlogic_configs[${{ matrix.target }}]}" ]]; then
            IFS=: read -r target_name board tag_name <<< "${amlogic_configs[${{ matrix.target }}]}"
            echo "openwrt_board=$board" >> $GITHUB_ENV
          fi
          
          echo "TARGET_NAME=$target_name" >> $GITHUB_ENV
          echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build OpenWrt Image
        if: steps.config.outputs.status == 'success'
        id: build
        run: |
          chmod +x $IMAGEBUILDER_SH
          releases_branch="${{ inputs.releases_branch }}"
          bash $IMAGEBUILDER_SH "${releases_branch%:*}" "${{ env.TARGET_NAME }}"
          echo "RELEASES_TAG=${releases_branch/:/_}" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Package Amlogic Images
        if: env.TARGET_NAME == 'amlogic' && steps.build.outputs.status == 'success'
        run: |
          cd imagebuilder
          git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-openwrt.git ophub_builder
          mkdir -p ophub_builder/openwrt-armvirt
          mv bin/targets/*/*/*rootfs.tar.gz ophub_builder/openwrt-armvirt/
          cd ophub_builder
          sudo ./remake -b ${{ env.openwrt_board }} -k 5.15.y_5.10.y -s 1024
          mkdir -p ../compiled_images_${{ env.TAG_NAME }}
          cp openwrt/out/*.img.gz ../compiled_images_${{ env.TAG_NAME }}/

      - name: Prepare Release Files
        run: |
          cd imagebuilder
          mkdir -p compiled_images_${{ env.TAG_NAME }}
          if [[ "${{ env.TARGET_NAME }}" != "amlogic" ]]; then
            find bin/targets -name "*.img.gz" -exec mv {} compiled_images_${{ env.TAG_NAME }}/ \;
          fi
          
          # Define file naming patterns
          declare -A patterns=(
            ["bcm27xx-bcm2710-rpi-3"]="Raspberry-Pi-3_ext4-sysupgrade"
            ["bcm27xx-bcm2711-rpi-4"]="Raspberry-Pi-4_ext4-sysupgrade"
            ["rockchip-armv8-friendlyarm_nanopi-r2c"]="NanoPi_R2C_ext4-sysupgrade"
            ["rockchip-armv8-friendlyarm_nanopi-r2s"]="NanoPi_R2S_ext4-sysupgrade"
            ["rockchip-armv8-friendlyarm_nanopi-r4s"]="NanoPi_R4S_ext4-sysupgrade"
            ["rockchip-armv8-xunlong_orangepi-r1-plus"]="Orange-Pi-R1_ext4-sysupgrade"
            ["rockchip-armv8-xunlong_orangepi-r1-plus-lts"]="Orange-Pi-R1-Plus-LTS_ext4-sysupgrade"
            ["x86-64-generic-ext4-combined"]="x86-64-Generic_ext4-combined"
            ["x86-64-generic-ext4-combined-efi"]="x86-64-Generic_ext4-combined-efi"
            ["_amlogic_s905x_"]="Amlogic_HG680P"
            ["_amlogic_s905x-b860h_"]="Amlogic_B860HV1-V2"
            ["_amlogic_s905x2_"]="Amlogic_B860HV5"
          )
          
          # Rename files
          for search in "${!patterns[@]}"; do
            for file in compiled_images_${{ env.TAG_NAME }}/*${search}*.img.gz; do
              if [[ -f "$file" ]]; then
                if [[ "${{ env.TARGET_NAME }}" == "amlogic" ]]; then
                  kernel=$(echo "$file" | grep -oP 'k[0-9.]+')
                  new_name="RTA-WRT_${{ env.RELEASES_TAG }}_${patterns[$search]}_${kernel}.img.gz"
                else
                  new_name="RTA-WRT_${{ env.RELEASES_TAG }}_${patterns[$search]}.img.gz"
                fi
                mv "$file" "compiled_images_${{ env.TAG_NAME }}/$new_name"
              fi
            done
          done

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.TAG_NAME }}
          path: imagebuilder/compiled_images_${{ env.TAG_NAME }}/*.img.gz
          retention-days: 7

      - name: Create GitHub Release
        uses: svenstaro/upload-release-action@v2
        continue-on-error: false
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: imagebuilder/compiled_images_${{ env.TAG_NAME }}/*.img.gz
          tag: ${{ env.RELEASES_TAG }}-${{ env.DATE }}
          release_name: RTA-WRT - ${{ env.RELEASES_TAG }}-${{ env.DATE }}
          overwrite: true
          body: |
            ![GitHub Downloads](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/${{ env.RELEASES_TAG }}-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)
            ### RTA-WRT ${{ env.RELEASES_TAG }}-${{ env.DATE }} Image Information
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            See [here](https://github.com/rtaserver/RTA-WRT?tab=readme-ov-file#detail-firmware) for more details.
            
            Default Credentials:
            - IP: 192.168.1.1
            - Username: root
            - Password: rtawrt
            - WiFi SSID: RTAWRT_2g | RTAWRT_5g (if supported)

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: inputs.notiftele == 'true'
    steps:
      - name: Send Telegram Notification
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          GROUP_ID: ${{ secrets.CHAT_ID }}
          MESSAGE_THREAD_ID: 36
        run: |
          DATE2=$(date +'%d\-%m\-%Y')
          MESSAGE="郊석둷郊석둷郊석둷郊석둷郊석둷郊석둷郊석둷
                          NEW UPDATE
          郊석둷郊석둷郊석둷郊석둷郊석둷郊석둷郊석둷
          NAME   : 游댒 RTA\-WRT OpenWRT
          TAG       : ${{ env.RELEASES_TAG }}\-${{ env.DATE }}
          DATE     : ${DATE2}
          REPO    : rizkikotet\-dev/RTA\-WRT
          郊석둷郊석둷郊석둷郊석둷郊석둷郊석둷郊석둷"

          BUTTONS='{
            "inline_keyboard": [[
              {"text": "KLIK DISINI", "url": "https://github.com/rizkikotet-dev/RTA-WRT"}
            ]]
          }'

          curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -d "chat_id=$GROUP_ID" \
            -d "text=$MESSAGE" \
            -d "parse_mode=MarkdownV2" \
            -d "reply_markup=$BUTTONS" \
            -d "message_thread_id=$MESSAGE_THREAD_ID"