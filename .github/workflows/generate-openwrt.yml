name: Build OpenWrt v2

on:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - immortalwrt:24.10.0
      devices:
        description: "Select device target"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - s912
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588s-orangepi-5
          - bcm2710-rpi-3b
          - bcm2711-rpi-4b
          - x86-64
      fiturs:
        description: "Select fitur"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - full-fitur
          - simpel
      notify:
        description: "Notify to Telegram"
        required: true
        default: false
        type: boolean

env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: imagebuilder.sh
  DEBIAN_FRONTEND: noninteractive
  APT_PACKAGES: >-
    build-essential
    libncurses5-dev
    zlib1g-dev
    gawk
    git
    gettext
    libssl-dev
    rsync
    wget
    unzip
    tar
    gzip
    qemu-utils
    mkisofs
    jq
    python3
    python3-pip
  CURRENT_BRANCH: ${{ github.ref_name }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      devices: ${{ steps.matrix.outputs.devices }}
      fiturs: ${{ steps.matrix.outputs.fiturs }}
      message_id: ${{ steps.telegram.outputs.message_id }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      startbuildtime: ${{ steps.setup.outputs.startbuildtime }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Add changelog info to new release description
        id: changelog
        shell: bash
        run: |
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' ${PWD}/CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"  
          echo "changelog=$r" >> $GITHUB_OUTPUT 

      - name: Configure Build Matrix
        id: matrix
        run: |
          DEVICES_JSON=$(cat << 'EOJ'
          {
            "devices": [
              "s905x",
              "s905x2",
              "s905x3",
              "s905x4",
              "s912",
              "h5-orangepi-zeroplus2",
              "h5-orangepi-zeroplus",
              "h5-orangepi-prime",
              "h5-orangepi-pc2",
              "h6-orangepi-lite2",
              "h6-orangepi-1plus",
              "h6-orangepi-3",
              "h6-orangepi-3lts",
              "h616-orangepi-zero2",
              "h618-orangepi-zero2w",
              "h618-orangepi-zero3",
              "rk3566-orangepi-3b",
              "rk3588s-orangepi-5",
              "bcm2710-rpi-3b",
              "bcm2711-rpi-4b",
              "x86-64"
            ]
          }
          EOJ
          )

          FITURS_JSON=$(cat << 'EOJ'
          {
            "fiturs": [
              "full-fitur",
              "simpel"
            ]
          }
          EOJ
          )
          
          if [ "${{ inputs.devices }}" = "all" ]; then
            echo "devices=$(echo "$DEVICES_JSON" | jq -c '.devices')" >> $GITHUB_OUTPUT
          else
            echo "devices=$(jq -nc --arg d "${{ inputs.devices }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

          if [ "${{ inputs.fiturs }}" = "all" ]; then
             echo "fiturs=$(echo "$FITURS_JSON" | jq -c '.fiturs')" >> $GITHUB_OUTPUT
          else
             echo "fiturs=$(jq -nc --arg f "${{ inputs.fiturs }}" '[$f]')" >> $GITHUB_OUTPUT
          fi

      - name: Send Initial Telegram Message
        id: telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          sudo timedatectl set-timezone "$TZ"
          THREAD_ID_BUILD=616
          
          devices='${{ steps.matrix.outputs.devices }}'
          fiturs='${{ steps.matrix.outputs.fiturs }}'

          create_build_status_message() {
          cat << EOF
          ━━━━━━━━━━━━━━━━━━━━━━
          🚀 *RTA-WRT | Build Status*
          ━━━━━━━━━━━━━━━━━━━━━━
          📌 *Version*: ${{ inputs.releases_branch }}
          🌿 *Branch*: ${{ github.ref_name }}
          📅 *Date*: $(date "+%d-%m-%Y %H:%M:%S")
          ━━━━━━━━━━━━━━━━━━━━━━
          📋 *Device List*
          EOF

          while read -r device; do
              while read -r fitur; do
                echo "🔹 $device $fitur | ⏳ Building"
              done < <(echo "$fiturs" | jq -r '.[]')
          done < <(echo "$devices" | jq -r '.[]')

          echo "━━━━━━━━━━━━━━━━━━━━━━"
          }

          BUILD_STATUS_MESSAGE=$(create_build_status_message)
          
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -d chat_id=$CHAT_ID \
            -d parse_mode=Markdown \
            -d message_thread_id=$THREAD_ID_BUILD \
            -d text="$BUILD_STATUS_MESSAGE")
          
          echo "message_id=$(echo $RESPONSE | jq -r '.result.message_id')" >> $GITHUB_OUTPUT

      - name: Setup Environment Variables
        id: setup
        run: |
          sudo timedatectl set-timezone "$TZ"

          STARTBUILDTIME=$(date +%s)
          echo "startbuildtime=${STARTBUILDTIME}" >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.device }}-${{ matrix.fitur }} release
    needs: prepare
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJSON(needs.prepare.outputs.devices) }}
        fitur: ${{ fromJson(needs.prepare.outputs.fiturs) }}
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Create Releases Name
        id: releases-name
        run: |
          sudo timedatectl set-timezone "$TZ"
          release_name() {
              local source_name="${1%:*}"  # Ambil bagian sebelum ":"
              local branch_version="${1#*:}"  # Ambil bagian setelah ":"
              local release_for="$2"
              local fitur="$3"

              case "$source_name" in
                  openwrt) source_name="OpenWrt" ;;
                  immortalwrt) source_name="ImmortalWrt" ;;
                  *) echo "Error: Source tidak dikenali" >&2; return 1 ;;
              esac

              case "$release_for" in
                  main) release_type="Stable" ;;
                  dev) release_type="Development" ;;
                  *) echo "Error: Jenis release tidak dikenali" >&2; return 1 ;;
              esac

              case "$fitur" in
                  full-fitur) fitur_name="Full Fitur" ;;
                  simpel) fitur_name="Simpel" ;;
                  *) echo "Error: Fitur tidak dikenali" >&2; return 1 ;;
              esac

              local tanggal=$(date +'%d-%m-%Y')

              echo "RTA-WRT - $release_type | $fitur_name | $source_name:$branch_version | $tanggal"
          }
          RELEASE_NAME=$(release_name "${{ inputs.releases_branch }}" "${{ github.ref_name }}" "${{ matrix.fitur }}")
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT

          DATETIME=$(date +'%d%m%Y')

          BRANCH_TAG=$(echo "${{ inputs.releases_branch }}" | tr ':' '_')

          case "${{ github.ref_name }}" in
              main) RELEASE_TAG="${BRANCH_TAG}-${{ matrix.fitur}}-main-${DATETIME}" ;;
              dev) RELEASE_TAG="${BRANCH_TAG}-${{ matrix.fitur}}-dev-${DATETIME}" ;;
              *) echo "Error: Branch tidak dikenali" >&2; exit 1 ;;
          esac

          echo "datetime=${DATETIME}" >> $GITHUB_ENV
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y ${{ env.APT_PACKAGES }}
          sudo timedatectl set-timezone "$TZ"

      - name: Extract Changelog
        id: changelog
        run: |
          changelog=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare Before Build
        run: |
          OPEWRT="${{ inputs.releases_branch }}"
          OP_SOURCE="${OPEWRT%:*}"
          sed -i -E "s|baseOpenwrt: 'null'|baseOpenwrt: '${OP_SOURCE}'|g" files/usr/share/ucode/luci/template/header.ut
          sed -i -E "s|currentBranch: 'null'|currentBranch: '${{ github.ref_name }}'|g" files/usr/share/ucode/luci/template/header.ut
          sed -i -E "s|currentVersion: 'null'|currentVersion: '${{ steps.releases-name.outputs.release_tag }}'|g" files/usr/share/ucode/luci/template/header.ut

      - name: Build Image
        id: build
        run: |
          chmod +x ${{ env.IMAGEBUILDER_SH }}
          if sudo ./${{ env.IMAGEBUILDER_SH }} ${{ inputs.releases_branch }} "${{ matrix.device }}" "${{ matrix.fitur }}"; then
            echo "status=✅ Success" >> $GITHUB_OUTPUT
            echo "✅ Success" > status.txt
          else
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "❌ Failed" > status.txt
            exit 1
          fi

      - name: Upload Build Status
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-status-${{ matrix.device }}-${{ matrix.fitur }}
          path: status.txt
          retention-days: 5

      - name: Get Existing Release ID
        id: get_release_id
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.releases-name.outputs.release_tag }}")
          
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')

          if [[ "$RELEASE_ID" == "null" ]]; then
            echo "Error: Release not found! Creating new release." >&2
            echo "release_exists=false" >> $GITHUB_ENV
          else
            echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
            echo "release_exists=true" >> $GITHUB_ENV
          fi
  
      - name: Create Release (If Not Exists)
        if: env.release_exists == 'false'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.releases-name.outputs.release_tag }}
          name: ${{ steps.releases-name.outputs.release_name }}
          body: |
            # 🚀 RTA-WRT - Release Information
            
            ## 📥 Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ steps.releases-name.outputs.release_tag }}/total?style=for-the-badge&logo=Openwrt)
            
            ## 📢 Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt) [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt) [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`
            
            ## 📝 Changelog
            ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.ref_name == 'dev' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release ID from New Release
        if: env.release_exists == 'false'
        run: echo "release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_ENV

      - name: Upload Artifact to Release
        run: |
          for file in imagebuilder/out_firmware/*; do
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(basename $file)"
          done

  notify:
    needs: [prepare, build]
    if: always()
    runs-on: ubuntu-latest   
    steps:
      - name: Download Build Status Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Update Telegram Message
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          THREAD_ID_BUILD=616

          devices='${{ needs.prepare.outputs.devices }}'
          fiturs='${{ needs.prepare.outputs.fiturs }}'

          format_time() {
            local total_seconds=$1
            local hours=$((total_seconds / 3600))
            local minutes=$(( (total_seconds % 3600) / 60 ))
            local seconds=$((total_seconds % 60))
            printf "%02d:%02d:%02d" $hours $minutes $seconds
          }
          
          end_time=$(date +%s)
          elapsed_time=$((end_time - ${{ needs.prepare.outputs.startbuildtime }}))
          formatted_time=$(format_time $elapsed_time)
  
          create_build_status_message() {
          cat << EOF
          ━━━━━━━━━━━━━━━━━━━━━━
          🚀 *RTA-WRT | Build Status*
          ━━━━━━━━━━━━━━━━━━━━━━
          📌 *Version*: ${{ inputs.releases_branch }}
          🌿 *Branch*: ${{ github.ref_name }}
          📅 *Date*: $(date "+%d-%m-%Y %H:%M:%S")
          ━━━━━━━━━━━━━━━━━━━━━━
          📋 *Device List*
          EOF

          while read -r device; do
            while read -r fitur; do
              status=$(cat "artifacts/build-status-$device-$fitur/status.txt" 2>/dev/null || echo "❓ Unknown")
              echo "🔹 $device $fitur | $status"
            done < <(echo "$fiturs" | jq -r '.[]')
          done < <(echo "$devices" | jq -r '.[]')

          cat << EOF
          🎉━━━━━━━━━━━━━━━━━━━━━━🎉
          ✨ *Build OpenWrt Selesai!* ✨
          🕒 Waktu Build: $formatted_time
          🎉━━━━━━━━━━━━━━━━━━━━━━🎉
          👤 @RizkiKotet
          ━━━━━━━━━━━━━━━━━━━━━━
          EOF
          }

          BUILD_STATUS_MESSAGE=$(create_build_status_message)
          
          curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/editMessageText" \
            -d chat_id=$CHAT_ID \
            -d message_id=${{ needs.prepare.outputs.message_id }} \
            -d parse_mode=Markdown \
            -d message_thread_id=$THREAD_ID_BUILD \
            -d text="$BUILD_STATUS_MESSAGE"
    
      - name: Notify Telegram
        if: inputs.notify == true && !cancelled()
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          THREAD_ID_UPDATE=734
          
          create_stable_message() {
          cat << EOF
          ━━━━━━━━━━━━━━━━━━━━━━
          🎯 *RTA-WRT Firmware Update*
          ✅ _Stable Release_

          🔹 *Versi:* ${{ inputs.releases_branch }}
          🔹 *Tanggal:* $(date "+%d-%m-%Y %H:%M:%S")

          📌 *Catatan:*
          📢 Versi Stabil Telah Diterbitkan!
          🔹 Disarankan untuk semua pengguna agar mendapatkan pengalaman terbaik!
          🔹 Ini Hasil Dari Marge Branch Development
          🔹 Dengan Fitur Baru Dan Perbaikan Bug
          🔹 Pastikan Anda Menggunakan Versi Terbaru Untuk Mendapatkan Fitur Terbaru

          ━━━━━━━━━━━━━━━━━━━━━━
          📋 ${{ needs.prepare.outputs.changelog }}
          ━━━━━━━━━━━━━━━━━━━━━━
          EOF
          }

          STABLE_MESSAGE=$(create_stable_message)
       
          create_dev_message() {
          cat << EOF
          ━━━━━━━━━━━━━━━━━━━━━━
          🚀 *RTA-WRT Firmware Update*
          🌟 _Development Release_

          🔹 *Versi:* ${{ inputs.releases_branch }}
          🔹 *Tanggal:* $(date "+%d-%m-%Y %H:%M:%S")

          📌 *Catatan:*
          📢 Ini Versi Pengembangan!
          🔹 Silahkan Bagi Yang Mempunyai Devices Nganggur
             Atau Sekedar Ingin Mencoba.
             Jika Terdapat Error Atau Bug. Mohon Lapor
             Karena Laporan Sangat Bermanfaat!
             Untuk Membantu Kami Membuat Firmware
             Yang Lebih Baik!

          ━━━━━━━━━━━━━━━━━━━━━━
          📋 ${{ needs.prepare.outputs.changelog }}
          ━━━━━━━━━━━━━━━━━━━━━━
          EOF
          }

          DEV_MESSAGE=$(create_dev_message)

          DATETIME=$(date +'%d%m%Y')

          BRANCH_TAG=$(echo "${{ inputs.releases_branch }}" | tr ':' '_')

          case "${{ github.ref_name }}" in
              main)
                RELEASE_TAG_FULL="${BRANCH_TAG}-full-fitur-main-${DATETIME}"
                RELEASE_TAG_SIMPEL="${BRANCH_TAG}-simpel-main-${DATETIME}"
                ;;
              dev)
                RELEASE_TAG_FULL="${BRANCH_TAG}-full-fitur-dev-${DATETIME}"
                RELEASE_TAG_SIMPEL="${BRANCH_TAG}-simpel-dev-${DATETIME}"
                ;;
              *) echo "Error: Branch tidak dikenali" >&2; exit 1 ;;
          esac
        
          BUTTONS='[
              [{"text": "📥 Unduh Full Fiturs", "url": "https://github.com/rizkikotet-dev/RTA-WRT/releases/tag/${RELEASE_TAG_FULL}"}],
              [{"text": "📥 Unduh Simpel", "url": "https://github.com/rizkikotet-dev/RTA-WRT/releases/tag/${RELEASE_TAG_SIMPEL}"}],
              [{"text": "📋 Status Build"", "url": "https://t.me/backup_rtawrt/616/${{ needs.prepare.outputs.message_id }}"}]
          ]'
          
          OPEWRT="${{ inputs.releases_branch }}"
          OP_SOURCE="${OPEWRT%:*}"
          if [ "$OP_SOURCE" == "immortalwrt" ]; then
            IMGURL="https://avatars.githubusercontent.com/u/53193414?s=200&v=4"
          else
            IMGURL="https://avatars.githubusercontent.com/u/2528830?s=200&v=4"
          fi

          if [ "${CURRENT_BRANCH}" == "main" ]; then
            MSGID=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto" \
              -d "chat_id=$CHAT_ID" \
              -d "caption=$STABLE_MESSAGE" \
              -d "parse_mode=Markdown" \
              -d "message_thread_id=$THREAD_ID_UPDATE" \
              -d "reply_markup={\"inline_keyboard\":$BUTTONS}" | jq '.result.message_id')

            curl -s -X POST "https://api.telegram.org/bot$TOKEN/pinChatMessage" \
              -d "chat_id=$CHAT_ID" \
              -d "photo=$IMGURL" \
              -d "message_id=$MSGID" \
              -d "message_thread_id=$THREAD_ID_UPDATE" \
              -d "disable_notification=true"
          else
            curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto" \
              -d "chat_id=$CHAT_ID" \
              -d "photo=$IMGURL" \
              -d "caption=$DEV_MESSAGE" \
              -d "parse_mode=Markdown" \
              -d "message_thread_id=$THREAD_ID_UPDATE" \
              -d "reply_markup={\"inline_keyboard\":$BUTTONS}"
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: info

      - name: Update Branch Info
        id: update
        env:
          CURRENT_BRANCH: ${{ env.CURRENT_BRANCH }}
        run: |
          set -euo pipefail

          fiturs='${{ needs.prepare.outputs.fiturs }}'
          BRANCH_TAG=$(echo "${{ inputs.releases_branch }}" | tr ':' '_')
          while read -r fitur; do
            OPEWRT="${{ inputs.releases_branch }}"
            OP_SOURCE="${OPEWRT%:*}"
            mkdir -p "${CURRENT_BRANCH}/${OP_SOURCE}"
        
            if [ -n "${{ needs.prepare.outputs.changelog }}" ]; then
              changelog_content=$(echo "${{ needs.prepare.outputs.changelog }}" | \
                sed -e 's/%0A/\n/g' \
                    -e 's/%0D/\r/g' \
                    -e 's/%25/%/g')
              echo "${changelog_content}" > "${CURRENT_BRANCH}/${OP_SOURCE}/${fitur}/changelog.txt"
              cat "${CURRENT_BRANCH}/${OP_SOURCE}/${fitur}/changelog.txt"
            else
              echo "No changelog content found"
              exit 1
            fi
        
            VERSION_TAG="${BRANCH_TAG}-${fitur}-${CURRENT_BRANCH}-${DATETIME}"
            echo "${VERSION_TAG}" > "${CURRENT_BRANCH}/${OP_SOURCE}/${fitur}/version.txt"
          done < <(echo "$fiturs" | jq -r '.[]')
          
          # Konfigurasi Git
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      
          git add .
      
          if ! git diff --cached --quiet; then
            git commit -m "Auto Release: $(date "+%d-%m-%Y %H:%M:%S")"
            git push || echo "Failed to push changes"
          else
            echo "No changes detected, skipping commit"
          fi
        
  cleanup:
    needs: [build, notify]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Delete Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10