name: Generate RTA-WRT Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: true
        default: "all-device"
        type: choice
        options:
          - all-device
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - x86-64
      tunnel:
        description: "Select VPN Client app:"
        required: true
        default: "all-tunnel"
        type: choice
        options:
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - all-tunnel
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: true
        default: "true"
        type: boolean

env:
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  WORKING_DIR: imagebuilder
  DEBIAN_FRONTEND: noninteractive

jobs:
  prebuild:
    runs-on: ubuntu-22.04
    name: ${{ inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set Matrix Run
        id: set-matrix
        run: |
          echo "Selected target option: [ $TARGET ]"
          TARGET_JSON=$(cat << 'EOJ'
          {
            "target": [
              "Raspberry Pi 3B",
              "Raspberry Pi 4B",
              "x86-64"
            ]
          }
          EOJ
          )

          if [ "${{ inputs.target }}" == "all-device" ]; then
            echo "target=$(echo "$TARGET_JSON" | jq -c '.target')" >> $GITHUB_OUTPUT
          else
            echo "target=$(jq -nc --arg d "${{ inputs.target }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

          echo "Selected tunnel option: [ $TUNNEL ]"

      - name: Setup Environment
        id: setupenv
        run: |
          sudo timedatectl set-timezone "${TZ}"
          BASE="${RELEASE_BRANCH%:*}"
          BRANCH="${RELEASE_BRANCH#*:}"
          VEROP="$(echo "${BRANCH}" | awk -F. '{print $1"."$2}')"

          echo "BASE=$BASE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VEROP=$VEROP" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.${BASE}.org" >> $GITHUB_ENV

          DATE=$(date +'%d%m%Y')
          DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')
          DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')

          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "DATETIME=$DATETIME" >> $GITHUB_ENV
          echo "DATEMONTH=$DATEMONTH" >> $GITHUB_ENV

          if [ "${BASE}" == "openwrt" ]; then
            echo "RELEASE_NAME=RTA-WRT_OpenWRT-${BRANCH}-${DATE}" >> $GITHUB_ENV
            echo "RELEASE_TAG=rtawrt-openwrt-${BRANCH}-${DATE}" >> $GITHUB_ENV
          else
            echo "RELEASE_NAME=RTA-WRT_ImmortalWRT-${BRANCH}-${DATE}" >> $GITHUB_ENV
            echo "RELEASE_TAG=rtawrt-immortalwrt-${BRANCH}-${DATE}" >> $GITHUB_ENV
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.setupenv.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # 🚀 RTA-WRT - Release Information

            ## 📥 Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ env.RELEASE_TAG }}/total?style=for-the-badge&logo=Openwrt)

            ## 📢 Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt) [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt) [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`

            ## 📝 Changelog Firmware
            [**Changelog Firmware**](https://github.com/rizkikotet-dev/RTA-WRT/blob/main/CHANGELOG.md "**Changelog Firmware**")
          generate_release_notes: true

  build-firmware:
    name: Build ${{ matrix.target }} Firmware
    needs: prebuild
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prebuild.outputs.target) }}

    steps:
      - name: Initialization environment
        id: init
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          TYPE="NON-AMLOGIC"
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          MATRIXTARGET="${{ matrix.target }}"
          echo "MATRIXTARGET=$MATRIXTARGET" >> $GITHUB_ENV

          # Target system configurations
          case "$MATRIXTARGET" in
            "Raspberry Pi 3B")
              echo "PROFILE=rpi-3" >> $GITHUB_ENV
              echo "TARGET_SYSTEM=bcm27xx/bcm2710" >> $GITHUB_ENV
              echo "TARGET_NAME=bcm27xx-bcm2710" >> $GITHUB_ENV
              echo "ARCH_1=armv7" >> $GITHUB_ENV
              echo "ARCH_2=aarch64" >> $GITHUB_ENV
              echo "ARCH_3=aarch64_cortex-a53" >> $GITHUB_ENV
              ;;
            "Raspberry Pi 4B")
              echo "PROFILE=rpi-4" >> $GITHUB_ENV
              echo "TARGET_SYSTEM=bcm27xx/bcm2711" >> $GITHUB_ENV
              echo "TARGET_NAME=bcm27xx-bcm2711" >> $GITHUB_ENV
              echo "ARCH_1=arm64" >> $GITHUB_ENV
              echo "ARCH_2=aarch64" >> $GITHUB_ENV
              echo "ARCH_3=aarch64_cortex-a72" >> $GITHUB_ENV
              ;;
            "NanoPi-R2S")
              echo "PROFILE=friendlyarm_nanopi-r2s" >> $GITHUB_ENV
              echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
              echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
              echo "ARCH_1=armv8" >> $GITHUB_ENV
              echo "ARCH_2=aarch64" >> $GITHUB_ENV
              echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
              ;;
            "NanoPi-R5S")
              echo "PROFILE=friendlyarm_nanopi-r5s" >> $GITHUB_ENV
              echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
              echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
              echo "ARCH_1=armv8" >> $GITHUB_ENV
              echo "ARCH_2=aarch64" >> $GITHUB_ENV
              echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
              ;;
            "x86-64")
              echo "PROFILE=generic" >> $GITHUB_ENV
              echo "TARGET_SYSTEM=x86/64" >> $GITHUB_ENV
              echo "TARGET_NAME=x86-64" >> $GITHUB_ENV
              echo "ARCH_1=amd64" >> $GITHUB_ENV
              echo "ARCH_2=x86_64" >> $GITHUB_ENV
              echo "ARCH_3=x86_64" >> $GITHUB_ENV
              ;;
          esac

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download and Prepare Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          # Determine archive extension based on version
          CURVER=$(echo "${{ env.BRANCH }}" | cut -d'.' -f1)
          archive_ext=$([ "${CURVER}" == "24" ] && echo "tar.zst" || echo "tar.xz")

          # Download image builder
          RELEASE="${{ env.DOWNLOAD_BASE }}/releases/${{ env.BRANCH }}/targets/${{ env.TARGET_SYSTEM }}/${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-${{ env.TARGET_NAME }}.Linux-x86_64.${archive_ext}"
          echo "Downloading from: $RELEASE"
          wget --progress=dot:giga "$RELEASE"

          # Extract archive based on extension
          case "${archive_ext}" in
            tar.xz)
              tar -xJf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.xz
              ;;
            tar.zst)
              tar --use-compress-program=unzstd -xf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.zst
              ;;
          esac

          # Setup working directory
          mv *-imagebuilder-* ${{ env.WORKING_DIR }}
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/${{ env.WORKING_DIR }}

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Customizations
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          ./scripts/TUNNEL.sh $TUNNEL

          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build Firmware Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          mkdir -p compiled_images
          chmod +x make-image.sh

          # Clean if requested
          if [ "${{ env.CLEAN }}" == "true" ]; then
            make clean
          fi
            
          # Build image
          time ./make-image.sh ${{ env.PROFILE }} $TUNNEL
            
          # Move and rename output files
          for file in bin/targets/"${{ env.TARGET_SYSTEM }}"/*.img.gz; do
            if [ -f "$file" ]; then
              new_name="RTA-WRT_$(basename "$file" .img.gz)_${TUNNEL}.img.gz"
              mv "$file" compiled_images/$new_name
            fi
          done

          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.build.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: ${{ env.WORKING_DIR }}/compiled_images/*.gz
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # 🚀 RTA-WRT - Release Information

            ## 📥 Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ env.RELEASE_TAG }}/total?style=for-the-badge&logo=Openwrt)

            ## 📢 Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt)
            [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt)
            [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## 📝 Changelog Firmware
            [**Changelog Firmware**](https://github.com/rizkikotet-dev/RTA-WRT/blob/main/CHANGELOG.md "**Changelog Firmware**")
          generate_release_notes: true
