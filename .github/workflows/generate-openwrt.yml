#=====================================================================================
# Workflow for Building OpenWrt with Image Builder
# Repository: https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: This workflow builds OpenWrt images using the Image Builder.
# Instructions: For more details, visit: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from:
#   - https://downloads.openwrt.org/releases
#   - https://downloads.immortalwrt.org/releases
#=====================================================================================

name: Build OpenWrt with ImageBuilder

on:
  push:
    tags:
      - openwrt-*

env:
  TZ: Asia/Jakarta
  OPENWRT_BASE: openwrt
  OPENWRT_BRANCH: 23.05.5
  IMAGEBUILDER_SH: imagebuilder.sh
  NOTIFE_TELEGRAM: true

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - Amlogic HG680P
          - Amlogic B860H-V5
          - Amlogic B860H-V1-V2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add changelog info to new release description
        id: changelog
        shell: bash
        run: |
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' ${PWD}/CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"  
          echo "CHANGELOG=$r" >> $GITHUB_OUTPUT

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs jq python3 python3-pip
          pip install telethon colorama
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "DATE=$(date +'%d%m%Y')" >> $GITHUB_ENV
          echo -e "[\033[94m INFO \033[0m] TARGET: ${{ matrix.target }}"

      - name: Setup Environment Variables
        id: init
        run: |
          declare -A target_map=(
            ["Raspberry Pi 3B"]="rpi-3|openwrt_rpi-3"
            ["Raspberry Pi 4B"]="rpi-4|openwrt_rpi-4"
            ["NanoPi R2C"]="friendlyarm_nanopi-r2c|openwrt_friendlyarm_nanopi-r2c"
            ["NanoPi R2S"]="friendlyarm_nanopi-r2s|openwrt_friendlyarm_nanopi-r2s"
            ["NanoPi R4S"]="friendlyarm_nanopi-r4s|openwrt_friendlyarm_nanopi-r4s"
            ["Orange Pi R1 Plus"]="xunlong_orangepi-r1-plus|openwrt_xunlong_orangepi-r1-plus"
            ["Orange Pi R1 Plus LTS"]="xunlong_orangepi-r1-plus-lts|openwrt_xunlong_orangepi-r1-plus-lts"
            ["x86-64"]="generic|openwrt_generic"
            ["Amlogic HG680P"]="amlogic|openwrt_amlogic_s905x"
            ["Amlogic B860H-V5"]="amlogic|openwrt_amlogic_s905x-b860h"
            ["Amlogic B860H-V1-V2"]="amlogic|openwrt_amlogic_s905x2"
          )

          IFS='|' read -r TARGET_NAME TAG_NAME <<< "${target_map[$TARGET]}"
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "status=success" >> ${GITHUB _OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"

      - name: Build Rootfs [ $OPENWRT_BASE ]
        id: imagebuilder
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "[\033[95m STEPS \033[0m] Building Firmware And Rootfs"
          chmod +x ${IMAGEBUILDER_SH}
          bash ${IMAGEBUILDER_SH} "${OPENWRT_BASE}:${OPENWRT_BRANCH}" "${{ env.TARGET_NAME }}"
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"

      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd imagebuilder
          rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Prepare file First
        run: |
          cd imagebuilder
          echo -e "[\033[95m STEPS \033[0m] Prepare File.."
          mkdir -p compiled_images_${{ env.TAG_NAME }}
          if [[ "${{ env.TARGET_NAME }}" != "amlogic" ]]; then
            mv bin/targets/*/*/*.img.gz compiled_images_${{ env.TAG_NAME }}
          else
            mv bin/targets/*/*/*rootfs.tar.gz compiled_images_${{ env.TAG_NAME }}
          fi
          echo -e "INFO files list: \n$(ls -l compiled_images_${{ env.TAG_NAME }} 2>/dev/null)"

      - name: Packaging OpenWrt For Amlogic
        run: |
          cd imagebuilder
          if [[ "${{ env.TARGET_NAME }}" == "amlogic" ]]; then
            echo -e "[\033[95m STEPS \033[0m] Cloning Ophub Repacking Amlogic"
            git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-openwrt.git ophub_builder
            mkdir -p ophub_builder/openwrt-armvirt
            mv compiled_images_${{ env.TAG_NAME }}/*rootfs.tar.gz ophub_builder/openwrt-armvirt/
            cd ophub_builder
            sudo ./remake -b ${{ env.openwrt_board }} -k 5.15.y_5.10.y -s 1024
            cp -f openwrt/out/*.img.gz ../compiled_images_${{ env.TAG_NAME }}
          fi

      - name: Prepare Before Uploads
        id: prepare2
        run: |
          cd imagebuilder
          echo -e "[\033[95m STEPS \033[0m] Replace Name"
          declare -A search_replace_patterns=(
              ["bcm27xx-bcm2710-rpi-3"]="Raspberry-Pi-3_ext4-sysupgrade"
              ["bcm27xx-bcm2711-rpi-4"]="Raspberry-Pi-4_ext4-sysupgrade"
              ["rockchip-armv8-friendlyarm_nanopi-r2c"]="NanoPi_R2C_ext4-sysupgrade"
              ["rockchip-armv8-friendlyarm_nanopi-r2s"]="NanoPi_R2S_ext4-sysupgrade"
              ["rockchip-armv8-friendlyarm_nanopi-r4s"]="NanoPi_R4S_ext4-sysupgrade"
              ["rockchip-armv8-xunlong_orangepi-r1-plus"]="Orange-Pi-R1_ext4-sysupgrade"
              ["rockchip-armv8-xunlong_orangepi-r1-plus-lts"]="Orange-Pi-R1-Plus-LTS_ext4-sysupgrade"
              ["x86-64-generic-ext4-combined-efi"]="x86-64-Generic_ext4-combined-efi"
              ["x86-64-generic-ext4-combined"]="x86-64-Generic_ext4-combined"
              ["x86-64-generic-squashfs-combined-efi"]="x86-64-Generic_squashfs-combined-efi"
              ["x86-64-generic-squashfs-combined"]="x86-64-Generic_squashfs-combined"
              ["_amlogic_s905x_"]="Amlogic_HG680P"
              ["_amlogic_s905x-b860h_"]="Amlogic_B860HV1-V2"
              ["_amlogic_s905x2_"]="Amlogic_B860HV5"
          )
          for search in "${ search_replace_patterns[@]}"; do
              replace="${search_replace_patterns[$search]}"
              for file in compiled_images_${{ env.TAG_NAME }}/*${search}*.img.gz; do
                  if [[ -f "$file" ]]; then
                      kernel=$(echo "$file" | grep -oP 'k[0-9.]+')
                      new_name="RTA-WRT_${OPENWRT_BASE}_${OPENWRT_BRANCH}_${replace}${kernel:+_$kernel}.img.gz"
                      echo -e "[\033[94m INFO \033[0m] Renaming: $file -> $new_name"
                      mv "$file" "compiled_images_${{ env.TAG_NAME }}/$new_name"
                  fi
              done
          done
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"
          echo -e "INFO files list: \n$(ls -l compiled_images_${{ env.TAG_NAME }} 2>/dev/null)"

      - name: Upload Firmware to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.TAG_NAME }}
          path: imagebuilder/compiled_images_${{ env.TAG_NAME }}/*.img.gz
          retention-days: 7

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: imagebuilder/compiled_images_${{ env.TAG_NAME }}/*.img.gz
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: false
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rizkikotet-dev/RTA-WRT/${{ github.ref }}/total?style=for-the-badge&logo=Openwrt)
            ### RTA-WRT ${{ env.OPENWRT_BASE }}-${{ env.OPENWRT_BRANCH }} Image information

            ${{ steps.changelog.outputs.CHANGELOG }}

            See [here](https://github.com/rizkikotet-dev/RTA-WRT?tab=readme-ov-file#detail-firmware) for more detail feature and other information.
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTAWRT_2g | RTAWRT_5g (if device supported)

  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: downloaded-firmware

      - name: Update Env
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs jq python3 python3-pip
          pip install telethon colorama
          sudo timedatectl set-timezone "$TZ"

      - name: Add changelog info to new release description
        id: changelog
        shell: bash
        run: |
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "CHANGELOG=$r" >> $GITHUB_OUTPUT

      - name: Notify Telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          GROUP_ID: ${{ secrets.CHAT_ID }}
          MESSAGE_THREAD_ID: 36
        run: |
          DATE=$(date +'%d%m%Y')
          MESSAGE=$(cat <<-END
          <blockquote>🟢 NEW UPDATE AVAILABLE 🟢</blockquote>

          <blockquote>➣ Name: RTA-WRT</blockquote>
          <blockquote>➣ Tag: ${OPENWRT_BASE}_${OPENWRT_BRANCH}-$DATE</blockquote>
          <blockquote>➣ Date : $DATE</blockquote>

          <pre>${{ steps.changelog.outputs.CHANGELOG }}</pre>
          END
          )  

          BUTTONS='{
              "inline_keyboard": [
                  [
                      {"text": "KLIK DISINI", "url": "https://github.com/rizkikotet-dev/RTA-WRT"}
                  ]
              ]
          }'

          if [ "${{ inputs.notiftele }}" == "true" ]; then
            curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
              -d "chat_id=$GROUP_ID" \
              -d "text=$MESSAGE" \
              -d "parse_mode=HTML" \
              -d "reply_markup=$(echo $BUTTONS | jq -c .)" \
              -d "message_thread_id=$MESSAGE_THREAD_ID"
          fi

      # - name: Upload To Telegram
      #   env:
      #     API_ID: ${{ secrets.API_ID }}
      #     API_HASH: ${{ secrets.API_HASH }}
      #     BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      #     GROUP_ID: ${{ secrets.CHAT_ID }}
      #     MESSAGE_THREAD_ID: 124
      #   run: |
      #     cd ${PWD}
      #     ls -l downloaded-firmware
      #     chmod +x telebot.py
      #     DATE=$(date +'%d%m%Y')
      #     MESSAGE=$(cat <<-END
      #     <blockquote>🟢 NEW UPDATE AVAILABLE 🟢</blockquote>

      #     <blockquote>➣ Name: RTA-WRT</blockquote>
      #     <blockquote>➣ Tag: ${OPENWRT_BASE}_${OPENWRT_BRANCH}-$DATE</blockquote>
      #     <blockquote>➣ Date : $DATE</blockquote>

      #     <pre>${{ steps.changelog.outputs.CHANGELOG }}</pre>
      #     END
      #     )
      #     if [ "${{ inputs.notiftele }}" == "true" ]; then
      #       python3 telebot.py "$API_ID" "$API_HASH" "$BOT_TOKEN" "$MESSAGE" "$GROUP_ID" "$MESSAGE_THREAD_ID" "downloaded-firmware/*/*.img.gz"
      #     fi
