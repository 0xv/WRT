#=====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description:   Build OpenWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#=====================================================================================

name: Build Test 1

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: true
        default: "openwrt:23.05.5"
        type: choice
        options:
          - openwrt:24.10.0-rc5
          - immortalwrt:24.10.0-rc3
          - immortalwrt:23.05.4
          - openwrt:23.05.5
      devices:
        description: "Select device target:"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588-orangepi-5plus
          - rk3588s-orangepi-5
          - x86-64
      notiftele:
        description: "Notif To Telegram:"
        required: true
        default: "true"
        type: choice
        options:
          - true
          - false

env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: imagebuilder.sh

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      devices: ${{ steps.set-matrix.outputs.devices }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.devices }}" == "all" ]; then
            echo "devices=['s905x','s905x2','s905x3','s905x4','h5-orangepi-zeroplus2','h5-orangepi-zeroplus','h5-orangepi-prime','h5-orangepi-pc2','h6-orangepi-lite2','h6-orangepi-1plus','h6-orangepi-3','h6-orangepi-3lts','h616-orangepi-zero2','h618-orangepi-zero2w','h618-orangepi-zero3','rk3566-orangepi-3b','rk3588-orangepi-5plus','rk3588s-orangepi-5','x86-64']" >> $GITHUB_OUTPUT
          else
            echo "devices=['${{ inputs.devices }}']" >> $GITHUB_OUTPUT
          fi
  build:
    needs: prebuild
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    name: "${{ matrix.devices }}"
    strategy:
      fail-fast: false
      matrix:
        devices: ${{fromJSON(needs.prebuild.outputs.devices)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse Release Branch
        run: |
          RELEASE_BRANCH="${{ inputs.releases_branch }}"
          RELEASE_TAG="${RELEASE_BRANCH/:/_}"
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          PACKAGES="build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs jq python3 python3-pip"
          sudo apt-get -qq update
          sudo apt-get -qq install $PACKAGES

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          pip install telethon
          pip install colorama
          sudo timedatectl set-timezone "$TZ"
          echo "DEVICES=${{ matrix.devices }}" >> $GITHUB_ENV
          echo -e "[\033[94m INFO \033[0m] DEVICES: ${{ matrix.devices }}"
          echo "DATE=$(date +'%d%m%Y')" >> $GITHUB_ENV

      - name: Build Image And Rootfs [ ${{ env.DEVICES}} ]
        id: imagebuilder
        run: |
          echo -e "[\033[95m STEPS \033[0m] Building Firmware And Rootfs"
          chmod +x ${IMAGEBUILDER_SH}
          bash ${IMAGEBUILDER_SH} ${{ env.RELEASE_BRANCH }} "${{ env.DEVICES }}"
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"

      - name: Clear Server Space
        if: ${{ steps.imagebuilder.outputs.status == 'success' }} && !cancelled()
        run: |
          cd imagebuilder
          rm -rf $(ls . | grep -v "^out_firmware$") 2>/dev/null
          df -hT ${PWD}

      - name: Upload Firmware to Artifact
        if: ${{ steps.imagebuilder.outputs.status == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.DEVICES }}
          path: imagebuilder/out_firmware/*.img.gz
          retention-days: 7

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: imagebuilder/out_firmware/*.img.gz
          tag: ${{ env.RELEASE_TAG }}-${{ env.DATE }}
          release_name: RTA-WRT - ${{ env.RELEASE_TAG }}-${{ env.DATE }}
          overwrite: true
          prerelease: false
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rizkikotet-dev/RTA-WRT/${{ env.RELEASE_TAG }}-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)
            ### RTA-WRT ${{ env.BASE }}-${{ env.BRANCH }} Image information

            ${{ steps.changelog.outputs.CHANGELOG }}

            See [here](https://github.com/rizkikotet-dev/RTA-WRT?tab=readme-ov-file#detail-firmware) for more detail feature and other information.
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTAWRT_2g | RTAWRT_5g (if device supported)



  notify:
    needs: build
    runs-on: ubuntu-latest
    name: Notify Telegram
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: downloaded-firmware

      - name: Update Env
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo apt-get -qq install jq python3 python3-pip
          pip install telethon
          pip install colorama
          sudo timedatectl set-timezone "$TZ"

      - name: Add changelog info to new release description
        id: changelog
        shell: bash
        run: |
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "CHANGELOG=$r" >> $GITHUB_OUTPUT 

      - name: Notify Telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          GROUP_ID: ${{ secrets.CHAT_ID }}
          MESSAGE_THREAD_ID: 36
        run: |
          DATE=$(date +'%d%m%Y')
          DATE2=$(date +'%d\-%m\-%Y')
          TAG="${{ env.RELEASES_TAG }}-${{ env.DATE }}"
          NEWTAG=$(echo "$TAG" | sed -E 's/([_\-\.\[\]()])/\\\1/g')
          MESSAGE=$(
              cat <<EOF
          â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬
                          NEW UPDATE
          â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬
          NAME   : ðŸ”” RTA\-WRT OpenWRT
          TAG       : $NEWTAG
          DATE     : ${DATE2}
          REPO    : rizkikotet\-dev/RTA\-WRT
          â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬â–¬
          EOF
          )

          BUTTONS='{
              "inline_keyboard": [
                  [
                      {"text": "KLIK DISINI", "url": "https://github.com/rizkikotet-dev/RTA-WRT"}
                  ]
              ]
          }'
  
          if [ "${{ inputs.notiftele }}" == "true" ]; then
            curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
              -d "chat_id=$GROUP_ID" \
              -d "text=$MESSAGE" \
              -d "parse_mode=MarkdownV2" \
              -d "reply_markup=$(echo $BUTTONS | jq -c .)" \
              -d "message_thread_id=$MESSAGE_THREAD_ID"
          fi


      # - name: Upload To Telegram
      #   env:
      #     API_ID: ${{ secrets.API_ID }}
      #     API_HASH: ${{ secrets.API_HASH }}
      #     BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      #     GROUP_ID: ${{ secrets.CHAT_ID }}
      #     MESSAGE_THREAD_ID: 124
      #   run: |
      #     cd ${PWD}
      #     ls -l downloaded-firmware
      #     chmod +x telebot.py
      #     DATE=$(date +'%d%m%Y')
      #     MESSAGE=$(cat <<-END
      #     <blockquote>ðŸŸ¢ NEW UPDATE AVAILABLE ðŸŸ¢</blockquote>

      #     <blockquote>âž£ Name: RTA-WRT</blockquote>
      #     <blockquote>âž£ Tag: ${OPENWRT_BASE}_${OPENWRT_BRANCH}-$DATE</blockquote>
      #     <blockquote>âž£ Date : $DATE</blockquote>

      #     <pre>${{ steps.changelog.outputs.CHANGELOG }}</pre>
      #     END
      #     )
      #     if [ "${{ inputs.notiftele }}" == "true" ]; then
      #       python3 telebot.py "$API_ID" "$API_HASH" "$BOT_TOKEN" "$MESSAGE" "$GROUP_ID" "$MESSAGE_THREAD_ID" "downloaded-firmware/*/*.img.gz"
      #     fi