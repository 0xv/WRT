name: Generate RTA-WRT ULO Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588-orangepi-5plus
          - rk3588s-orangepi-5
      tunnel:
        description: "Select VPN Client app:"
        required: true
        default: "openclash-passwall-nikki"
        type: choice
        options:
          - all
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - openclash-passwall-nikki
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: true
        default: "true"
        type: boolean

env:
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  WORKING_DIR: imagebuilder
  DEBIAN_FRONTEND: noninteractive

jobs:
  check-compatibility:
    name: Check Compatibility
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ steps.compatibility.outputs.status }}

    steps:
      - name: Check System Requirements
        id: compatibility
        run: |
          echo "Checking system requirements..."
          echo "CPU Architecture: $(uname -m)"
          echo "Available RAM: $(free -h)"
          echo "Available Disk Space: $(df -h /)"
          echo "Selected tunnel option: [${{ env.TUNNEL }}]"
          echo "status=success" >> $GITHUB_OUTPUT

  build-firmware:
    name: Build ${{ inputs.release_branch }}-${{ inputs.tunnel }}
    needs: check-compatibility
    if: needs.check-compatibility.outputs.status == 'success'
    runs-on: ubuntu-22.04

    steps:
      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          TYPE="AMLOGIC"
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        if: github.event.inputs.target == 'all'
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          case "${{ env.TARGET }}" in
            "all")
              openwrt_board=$(cat << 'EOF' | tr -d ' ' | paste -sd "_"
              s905
              s905-beelink-mini
              s905-mxqpro-plus
              s905w
              s905w-w95
              s905w-x96-mini
              s905w-x96w
              s905x
              s905x-b860h
              s905x-nexbox-a95x
              s905x2
              s905x2-km3
              s905x2-x96max-2g
              s905x3
              s905x3-h96max
              s905x3-hk1
              s905x3-x96max
              s912
              s912-h96pro-plus
              s912-x92
          EOF
              )
              echo "openwrt_board=$openwrt_board" >> $GITHUB_ENV
              ;;
            *)
              echo "openwrt_board=${{ env.TARGET }}" >> $GITHUB_ENV
              ;;
          esac

          # Set architecture variables
          echo "PROFILE=generic" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
          echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV

          # Set base distribution info
          BASE="${RELEASE_BRANCH%:*}"
          BRANCH="${RELEASE_BRANCH#*:}"
          VEROP="$(echo "${BRANCH}" | awk -F. '{print $1"."$2}')"

          echo "BASE=$BASE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VEROP=$VEROP" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.${BASE}.org" >> $GITHUB_ENV

          # Set date variables
          echo "DATE=$(date +'%d%m%Y')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV

          echo "Build variables configured successfully"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download and Prepare Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          # Determine archive extension
          CURVER=$(echo "${{ env.BRANCH }}" | cut -d'.' -f1)
          archive_ext=$([ "${CURVER}" == "24" ] && echo "tar.zst" || echo "tar.xz")

          # Download image builder
          RELEASE="${{ env.DOWNLOAD_BASE }}/releases/${{ env.BRANCH }}/targets/${{ env.TARGET_SYSTEM }}/${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-${{ env.TARGET_NAME }}.Linux-x86_64.${archive_ext}"
          echo "Downloading from: $RELEASE"
          wget --progress=dot:giga "$RELEASE"

          # Extract archive
          case "${archive_ext}" in
            tar.xz)
              tar -xJf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.xz
              ;;
            tar.zst)
              tar --use-compress-program=unzstd -xf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.zst
              ;;
          esac

          # Setup working directory
          mv *-imagebuilder-* ${{ env.WORKING_DIR }}
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/${{ env.WORKING_DIR }}

          echo "Image builder prepared successfully"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          PACKAGE_COUNT=$(find packages -type f -name "*.ipk" | wc -l)
          echo "Downloaded $PACKAGE_COUNT external packages"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Customizations
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          if [[ "${{ env.TUNNEL }}" == "all" ]]; then
            ./scripts/TUNNEL.sh openclash-passwall-nikki
          elif [[ "${{ env.TUNNEL }}" =~ ^(openclash|passwall|nikki|openclash-passwall|nikki-passwall|nikki-openclash|openclash-passwall-nikki|no-tunne)$ ]]; then
            ./scripts/TUNNEL.sh "${{ env.TUNNEL }}"
          fi

          echo "Customizations applied successfully"
          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build Firmware Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          mkdir -p compiled_images
          chmod +x make-image.sh

          build_image() {
            local tunnel=$1
            echo "Building with VPN Client: $tunnel"
            
            # Clean if requested
            if [ "${{ env.CLEAN }}" == "true" ]; then
              make clean
            fi
            
            # Build image
            time ./make-image.sh ${{ env.PROFILE }} $tunnel
            
            # Move and rename output files
            for file in bin/targets/"${{ env.TARGET_SYSTEM }}"/*rootfs.tar.gz; do
              if [ -f "$file" ]; then
                new_name="RTA-WRT_$(basename "$file" .tar.gz)_${tunnel}.tar.gz"
                mv "$file" compiled_images/$new_name
              fi
            done
          }

          if [[ "${{ env.TUNNEL }}" == "all" ]]; then
            for tunnel in openclash passwall nikki openclash-passwall nikki-passwall nikki-openclash openclash-passwall-nikki no-tunnel; do
              build_image $tunnel
            done
          else
            build_image ${{ env.TUNNEL }}
          fi

          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Package ULO Images
        id: package
        if: steps.build.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          # Define supported devices and their kernel versions
          declare -A KERNEL_VERSIONS=(
              ["h5"]="6.1.104-AW64-DBAI"    # Allwinner H5
              ["h6"]="6.1.104-AW64-DBAI"    # Allwinner H6
              ["h616"]="6.1.104-AW64-DBAI"  # Allwinner H616
              ["h618"]="6.1.104-AW64-DBAI"  # Allwinner H618
              ["s905"]="6.1.66-DBAI"        # Amlogic S905
              ["rk"]="5.10.160-rk35v-dbai"  # Rockchip
          )

          # Define supported tunnels
          readonly SUPPORTED_TUNNELS=(
              "openclash"
              "passwall"
              "nikki"
              "openclash-passwall"
              "nikki-passwall"
              "nikki-openclash"
              "openclash-passwall-nikki"
              "no-tunnel"
          )

          # Function to get kernel version based on device prefix
          get_kernel_version() {
              local device="$1"
              local prefix=""
              
              # Extract device prefix
              if [[ "$device" =~ ^(h5|h6|h616|h618) ]]; then
                  prefix="${BASH_REMATCH[1]}"
              elif [[ "$device" =~ ^(s905) ]]; then
                  prefix="s905"
              elif [[ "$device" =~ ^(rk) ]]; then
                  prefix="rk"
              else
                  echo "ERROR: Unknown device type: $device"
                  return 1
              fi
              
              # Get kernel version
              local kernel="${KERNEL_VERSIONS[$prefix]}"
              if [[ -z "$kernel" ]]; then
                  echo "ERROR: No kernel defined for device type: $device"
                  return 1
              fi
              
              echo "$kernel"
              return 0
          }

          # Function to validate tunnel type
          validate_tunnel() {
              local tunnel="$1"
              for supported_tunnel in "${SUPPORTED_TUNNELS[@]}"; do
                  if [[ "$tunnel" == "$supported_tunnel" ]]; then
                      return 0
                  fi
              done
              echo "ERROR: Unsupported tunnel type: $tunnel"
              return 1
          }

          # Function to build a single configuration
          build_config() {
              local device="$1"
              local tunnel="$2"
              local builder="$3"
              
              # Get appropriate kernel version
              local kernel
              kernel=$(get_kernel_version "$device")
              if [[ $? -ne 0 ]]; then
                  echo "$kernel"  # Error message from get_kernel_version
                  return 1
              fi
              
              # Validate tunnel type
              if ! validate_tunnel "$tunnel"; then
                  return 1
              fi
              
              echo "Building for device: $device"
              echo "Using kernel: $kernel"
              echo "Tunnel type: $tunnel"
              
              if ! REPACKWRT.sh "$builder" "$device" "$kernel" "$tunnel"; then
                  echo "ERROR: Build failed for device: $device, kernel: $kernel, tunnel: $tunnel"
                  return 1
              fi
              
              return 0
          }

          # Main build function
          main() {
              local devices="${DEVICES:-all}"
              local tunnel="${TUNNEL:-all}"
              local builder="${BUILD:-ulo}"
              
              # All supported devices
              local all_devices=(
                  "s905x" "s905x2" "s905x3" "s905x4"
                  "h5-orangepi-zeroplus2" "h5-orangepi-zeroplus" "h5-orangepi-prime" "h5-orangepi-pc2"
                  "h6-orangepi-lite2" "h6-orangepi-1plus" "h6-orangepi-3" "h6-orangepi-3lts"
                  "h616-orangepi-zero2" "h618-orangepi-zero2w" "h618-orangepi-zero3"
                  "rk3566-orangepi-3b" "rk3588-orangepi-5plus" "rk3588s-orangepi-5"
              )
              
              # Build for all devices or specific device
              if [[ "$devices" == "all" ]]; then
                  echo "Building for all devices"
                  for device in "${all_devices[@]}"; do
                      if [[ "$tunnel" == "all" ]]; then
                          echo "Building all tunnel configurations for device: $device"
                          for tunnel_type in "${SUPPORTED_TUNNELS[@]}"; do
                              if ! build_config "$device" "$tunnel_type" "$builder"; then
                                  echo "WARNING: Build failed for device: $device, tunnel: $tunnel_type"
                                  continue
                              fi
                          done
                      else
                          if ! build_config "$device" "$tunnel" "$builder"; then
                              echo "WARNING: Build failed for device: $device"
                              continue
                          fi
                      fi
                  done
              else
                  # Build for specific device
                  if [[ "$tunnel" == "all" ]]; then
                      echo "Building all tunnel configurations for device: $devices"
                      for tunnel_type in "${SUPPORTED_TUNNELS[@]}"; do
                          if ! build_config "$devices" "$tunnel_type" "$builder"; then
                              echo "WARNING: Build failed for tunnel: $tunnel_type"
                              continue
                          fi
                      done
                  else
                      if ! build_config "$devices" "$tunnel" "$builder"; then
                          echo "ERROR: Build failed"
                          exit 1
                      fi
                  fi
              fi
              
              echo "Build process completed"
          }

          # Run main script
          main

          echo "status=success" >> $GITHUB_OUTPUT
          ls -la compiled_images/

      - name: Mod SDCard
        id: modsdcard
        if: steps.package.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          # chmod +x scripts/MODSDCARD.sh
          # if [[ "$(find "$GITHUB_WORKSPACE/$WORKING_DIR/compiled_images" -name "*_s905x_*.img.gz")" ]]; then
          #   ./scripts/MODSDCARD.sh
          # fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.modsdcard.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "rtawrt-amlogic-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATE }}"
          name: RTA-WRT-ULO-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATE }}
          files: ${{ env.WORKING_DIR }}/compiled_images/*.gz
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # 🚀 RTA-WRT - Release Information

            ## 📥 Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/rtawrt-amlogic-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)

            ## 📢 Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt) [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt) [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`

            ## 📝 Changelog Firmware
            [**Changelog Firmware**](https://github.com/rizkikotet-dev/RTA-WRT/blob/main/CHANGELOG.md "**Changelog Firmware**")
          generate_release_notes: true
