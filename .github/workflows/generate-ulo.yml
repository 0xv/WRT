name: Generate RTA-WRT ULO Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: false
        default: "all-device"
        type: choice
        options:
          - all-device
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588s-orangepi-5
      tunnel:
        description: "Select VPN Client app:"
        required: true
        default: "all-tunnel"
        type: choice
        options:
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - all-tunnel
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean

env:
  TZ: Asia/Jakarta
  WORKING_DIR: imagebuilder
  DEBIAN_FRONTEND: noninteractive
  RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
  TARGET: ${{ github.event.inputs.target }}
  TUNNEL: ${{ github.event.inputs.tunnel }}
  CLEAN: ${{ github.event.inputs.clean }}

jobs:
  prebuild:
    runs-on: ubuntu-22.04
    name: ${{ github.event.inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
      type: ${{ steps.setupenv.outputs.type }}
      base: ${{ steps.setupenv.outputs.base }}
      branch: ${{ steps.setupenv.outputs.branch }}
      verop: ${{ steps.setupenv.outputs.verop }}
      download_base: ${{ steps.setupenv.outputs.download_base }}
      date: ${{ steps.setupenv.outputs.date }}
      datetime: ${{ steps.setupenv.outputs.datetime }}
      datemonth: ${{ steps.setupenv.outputs.datemonth }}
      release_name: ${{ steps.setupenv.outputs.release_name }}
      release_tag: ${{ steps.setupenv.outputs.release_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set Matrix Run
        id: set-matrix
        run: |
          echo "Selected target option: [ ${{ github.event.inputs.target }} ]"
          TARGET_JSON=$(cat << 'EOJ'
          {
            "target": [
              "s905x",
              "s905x2",
              "s905x3",
              "s905x4",
              "h5-orangepi-zeroplus2",
              "h5-orangepi-zeroplus",
              "h5-orangepi-prime",
              "h5-orangepi-pc2",
              "h6-orangepi-lite2",
              "h6-orangepi-1plus",
              "h6-orangepi-3",
              "h6-orangepi-3lts",
              "h616-orangepi-zero2",
              "h618-orangepi-zero2w",
              "h618-orangepi-zero3",
              "rk3566-orangepi-3b",
              "rk3588s-orangepi-5"
            ]
          }
          EOJ
          )

          if [ "${{ github.event.inputs.target }}" == "all-device" ]; then
            echo "target=$(echo "$TARGET_JSON" | jq -c '.target')" >> $GITHUB_OUTPUT
          else
            echo "target=$(jq -nc --arg d "${{ github.event.inputs.target }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

          echo "Selected tunnel option: [ ${{ github.event.inputs.tunnel }} ]"

      - name: Setup Release Environment
        id: setupenv
        run: |
          sudo timedatectl set-timezone "${{ env.TZ }}"

          TYPE="ULO"
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT

          BASE="${RELEASE_BRANCH%:*}"
          BRANCH="${RELEASE_BRANCH#*:}"
          VEROP="$(echo "${BRANCH}" | awk -F. '{print $1"."$2}')"

          echo "BASE=$BASE" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "VEROP=$VEROP" >> $GITHUB_OUTPUT
          echo "DOWNLOAD_BASE=https://downloads.${BASE}.org" >> $GITHUB_OUTPUT

          DATE=$(date +'%d%m%Y')
          DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')
          DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')

          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "DATETIME=$DATETIME" >> $GITHUB_OUTPUT
          echo "DATEMONTH=$DATEMONTH" >> $GITHUB_OUTPUT

          if [ "${BASE}" == "openwrt" ]; then
            RELEASE_NAME="RTA-WRT_ULO-OpenWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-ulo-openwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          else
            RELEASE_NAME="RTA-WRT_ULO-ImmortalWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-ulo-immortalwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.setupenv.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.setupenv.outputs.release_tag }}
          name: ${{ steps.setupenv.outputs.release_name }}
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # 🚀 RTA-WRT - Release Information

            ## 📥 Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ steps.setupenv.outputs.release_tag }}/total?style=for-the-badge&logo=Openwrt)

            ## 📢 Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt) [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt) [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`

            ## 📝 Changelog Firmware
            [**Changelog Firmware**](https://github.com/rizkikotet-dev/RTA-WRT/blob/main/CHANGELOG.md "**Changelog Firmware**")
          generate_release_notes: true

  build-firmware:
    name: Build ${{ matrix.target }} Firmware
    needs: prebuild
    runs-on: ubuntu-22.04
    env:
      TYPE: ${{ needs.prebuild.outputs.type }}
      BASE: ${{ needs.prebuild.outputs.base }}
      BRANCH: ${{ needs.prebuild.outputs.branch }}
      VEROP: ${{ needs.prebuild.outputs.verop }}
      DOWNLOAD_BASE: ${{ needs.prebuild.outputs.download_base }}
      DATE: ${{ needs.prebuild.outputs.date }}
      DATETIME: ${{ needs.prebuild.outputs.datetime }}
      DATEMONTH: ${{ needs.prebuild.outputs.datemonth }}
      RELEASE_NAME: ${{ needs.prebuild.outputs.release_name }}
      RELEASE_TAG: ${{ needs.prebuild.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prebuild.outputs.target) }}

    steps:
      - name: Initialization environment
        id: init
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${{ env.TZ }}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          MATRIXTARGET="${{ matrix.target }}"
          echo "MATRIXTARGET=$MATRIXTARGET" >> $GITHUB_ENV

          # Target system configurations
          echo "PROFILE=generic" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
          echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV

          case "$MATRIXTARGET" in
            h5-*|h616-*|h618-*|h6-*)
                KERNEL="6.1.31-AW64-DBAI"
                echo "KERNEL=$KERNEL" >> $GITHUB_ENV
                ;;
            s905*)
                KERNEL="6.1.66-DBAI"
                echo "KERNEL=$KERNEL" >> $GITHUB_ENV
                ;;
            rk*)
                KERNEL="5.10.160-rk35v-dbai"
                echo "KERNEL=$KERNEL" >> $GITHUB_ENV
                ;;
          esac

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download and Prepare Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          # Determine archive extension based on version
          CURVER=$(echo "${{ env.BRANCH }}" | cut -d'.' -f1)
          archive_ext=$([ "${CURVER}" == "24" ] && echo "tar.zst" || echo "tar.xz")

          # Download image builder
          RELEASE="${{ env.DOWNLOAD_BASE }}/releases/${{ env.BRANCH }}/targets/${{ env.TARGET_SYSTEM }}/${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-${{ env.TARGET_NAME }}.Linux-x86_64.${archive_ext}"
          echo "Downloading from: $RELEASE"
          wget --progress=dot:giga "$RELEASE"

          # Extract archive based on extension
          case "${archive_ext}" in
            tar.xz)
              tar -xJf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.xz
              ;;
            tar.zst)
              tar --use-compress-program=unzstd -xf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.zst
              ;;
          esac

          # Setup working directory
          mv *-imagebuilder-* ${{ env.WORKING_DIR }}
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/${{ env.WORKING_DIR }}

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Customizations
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          ./scripts/TUNNEL.sh ${{ env.TUNNEL }}

          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build Firmware Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          mkdir -p compiled_images
          chmod +x make-image.sh

          # Clean if requested
          if [ "${{ env.CLEAN }}" == "true" ]; then
            make clean
          fi
            
          # Build image
          time ./make-image.sh ${{ env.PROFILE }} ${{ env.TUNNEL }}
            
          # Move and rename output files
          for file in bin/targets/"${{ env.TARGET_SYSTEM }}"/*-rootfs.tar.gz; do
            if [ -f "$file" ]; then
              new_name="RTA-WRT_$(basename "$file" -rootfs.tar.gz)_${{ env.TUNNEL }}-rootfs.tar.gz"
              mv "$file" compiled_images/$new_name
            fi
          done

          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Repack OpenWrt
        id: repack
        if: steps.build.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/REPACKWRT.sh
          ./scripts/REPACKWRT.sh "ulo" "$MATRIXTARGET" "$KERNEL" "${{ env.TUNNEL }}"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Mod SDCard
        id: modsdcard
        if: steps.repack.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/MODSDCARD.sh
          ./scripts/MODSDCARD.sh
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Before Upload
        id: beforeupload
        if: steps.modsdcard.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          for file in compiled_images/*.img.gz; do
            if [ -f "$file" ]; then
              base_name=$(basename "$file" .img.gz)
              new_name="RTA-WRT_${base_name}_${{ env.TUNNEL }}.img.gz"
              mv "$file" "compiled_images/${new_name}"
            else
              echo "No image files found in compiled_images directory"
              exit 1
            fi
          done
          echo "status=success" >> "$GITHUB_OUTPUT"

      - name: Create Release
        if: steps.beforeupload.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: ${{ env.WORKING_DIR }}/compiled_images/*.img.gz
          prerelease: ${{ github.ref_name == 'dev' }}

      - name: Generate file download links
        run: |
          RELEASE_URL="https://github.com/rizkikotet-dev/RTA-WRT/releases/download/${{ env.RELEASE_TAG }}"
          ls compiled_images/*.gz | while read -r file; do
            filename=$(basename "$file")
            echo "$RELEASE_URL/$filename" >> artifacts.txt
          done

      - name: Upload file links as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-links
          path: artifacts.txt

  notify:
    name: Notify Release
    needs: [prebuild, build-firmware]
    runs-on: ubuntu-latest
    steps:
      - name: Download file links as artifact
        uses: actions/download-artifact@v4
        with:
          name: release-links
          path: artifacts.txt

      - name: Telegram Notification
        run: |
          BOT_TOKEN="${{ secrets.BOT_TOKEN }}"
          CHAT_ID="${{ secrets.CHAT_ID }}"
          THREAD_ID="734"

          # Build parameters
          BUILD="${{ needs.prebuild.outputs.type }}"
          SOURCE="${{ needs.prebuild.outputs.base }}"
          VERSION="${{ needs.prebuild.outputs.branch }}"
          BUILD_TYPE="${{ env.TUNNEL }}"
          FOR="${{ github.ref_name }}"

          # Set image URL based on source
          if [ "$SOURCE" = "ImmortalWrt" ]; then
              image_url="https://avatars.githubusercontent.com/u/53193414?s=200&v=4"
          else
              image_url="https://avatars.githubusercontent.com/u/2528830?s=200&v=4"
          fi

          # Generate message based on branch
          if [ "$FOR" = "main" ]; then
              message="━━━━━━━━━━━━━━━━━━━━━━
          🎯 *RTA-WRT Firmware Update*
          ✅ _Stable Release_

          🔹 *Build:* ${BUILD}
          🔹 *Version:* ${SOURCE}:${VERSION}
          🔹 *Date:* $(date '+%d-%m-%Y %H:%M:%S')
          🔹 *Build Type:* ${BUILD_TYPE}

          📌 *Release Notes:*
          • Stable version release
          • Recommended for all users
          • Includes latest features and bug fixes
          ━━━━━━━━━━━━━━━━━━━━━━"
          else
              message="━━━━━━━━━━━━━━━━━━━━━━
          🚀 *RTA-WRT Firmware Update*
          🌟 _Development Release_

          🔹 *Build:* ${BUILD}
          🔹 *Version:* ${SOURCE}:${VERSION}
          🔹 *Date:* $(date '+%d-%m-%Y %H:%M:%S')
          🔹 *Build Type:* ${BUILD_TYPE}

          📌 *Development Notes:*
          • Suitable for testing
          • Please provide feedback
          • Report any bugs found
          • Your feedback helps development
          ━━━━━━━━━━━━━━━━━━━━━━"
          fi

          BUTTONS='[]'
          while read -r file_url; do
              filename=$(basename "$file_url")
              BUTTONS=$(echo "$BUTTONS" | jq --arg file "$filename" --arg url "$file_url" \
                '. += [[{"text": "📥 Download \($file)", "url": "\($url)"}]]')
          done < artifacts.txt

          # Add a button to view the release
          BUTTONS=$(echo "$BUTTONS" | jq '. += [[{"text": "🔗 View Release", "url": "https://github.com/rizkikotet-dev/RTA-WRT/releases/tag/${{ needs.prebuild.outputs.release_tag }}"}]]')

          # Send message with photo
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto" \
              -d "chat_id=${CHAT_ID}" \
              -d "photo=${image_url}" \
              -d "caption=${message}" \
              -d "parse_mode=Markdown" \
              -d "message_thread_id=${THREAD_ID}" \
              -d "reply_markup={\"inline_keyboard\":$BUTTONS}"

          # Clean up
          rm -f artifacts.txt
