#=====================================================================================
# Description:   Build OpenWrt and ImmortalWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#=====================================================================================
name: Generate RTA-WRT Firmware

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select device target:"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "snapshots"
        type: choice
        options:
          - snapshots
          - 23.05.4
      tunnel:
        description: "Select VPN Client app (!passwall only support for newer branch with fw4 firewall!):"
        required: true
        default: "openclash"
        type: choice
        options:
          - all
          - openclash
          - passwall
          - openclash-passwall
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean
      squashfs:
        description: "Generate squashfs image"
        required: false
        default: "false"
        type: boolean
      upload-artifacts:
        description: "Upload compiled image to Artifacts only"
        required: false
        default: "false"
        type: boolean
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "true"
        type: boolean

env:
  ROOTFS_SQUASHFS: ${{ inputs.squashfs }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
             echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64']" >> $GITHUB_OUTPUT
          else
             echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
          fi
          
      - name: Checking Tunnel Option
        run: |
          echo "Selected tunnel option: [ $TUNNEL ]"

  Generate:
    needs: prebuild
    runs-on: ubuntu-latest
    name: "${{ matrix.target }}; ${{ inputs.tunnel }}"
    
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:      
      - name: Initialization System Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs zstd
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV

      - name: Setup Environment Variables
        run: |
          if [ "$TARGET" == "Raspberry Pi 3B" ]; then
            echo "PROFILE=rpi-3" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2710" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2710" >> $GITHUB_ENV
            TARGET_NAME="bcm27xx-bcm2710"
            echo "ARCH_1=armv7" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_cortex-a53" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 4B" ]; then
            echo "PROFILE=rpi-4" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2711" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2711" >> $GITHUB_ENV
            TARGET_NAME="bcm27xx-bcm2711"
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_cortex-a72" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2C" ]; then
            echo "PROFILE=friendlyarm_nanopi-r2c" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2S" ]; then
            echo "PROFILE=friendlyarm_nanopi-r2s" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R4S" ]; then
            echo "PROFILE=friendlyarm_nanopi-r4s" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus" ]; then
            echo "PROFILE=xunlong_orangepi-r1-plus" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus LTS" ]; then
            echo "PROFILE=xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "x86-64" ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=x86/64" >> $GITHUB_ENV
            echo "TARGET_NAME=x86-64" >> $GITHUB_ENV
            TARGET_NAME="x86-64"
            echo "ARCH_1=amd64" >> $GITHUB_ENV
            echo "ARCH_2=x86_64" >> $GITHUB_ENV
            echo "ARCH_3=x86_64" >> $GITHUB_ENV
          fi
          echo "WORKING_DIR=openwrt-imagebuilder-"$TARGET_NAME".Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.openwrt.org" >> $GITHUB_ENV
          echo "BASE=openwrt" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          path: origin

      - name: Download Image Builder
        id: download
        run: |
          if [ "$BRANCH" == "snapshots" ]; then
            SNAPSHOTS="$DOWNLOAD_BASE/snapshots/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$TARGET_NAME.Linux-x86_64.tar.zst"
            wget -nv "$SNAPSHOTS"
            tar -xvf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.zst && mv *-imagebuilder-* $WORKING_DIR && sync
          else
            RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
            wget -nv "$RELEASE"
            tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          fi
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/external-package-urls.sh
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/builder-patch.sh
          bash scripts/misc.sh
          if [[ "$TUNNEL" == "all" ]]; then 
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh openclash-passwall
          elif [[ "$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall" || "$TUNNEL" == "openclash" ]]; then
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh "$TUNNEL"
          else
              echo "No VPN Client selected"
          fi
          if [ "$TUNNEL" = "openclash-passwall" ] || [ "$TUNNEL" == "openclash" ] || [ "$TUNNEL" = "all" ]; then bash scripts/clash-core.sh; fi
          echo "Total custom packages: $(find packages -type f -name "*.ipk" | wc -l)"
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          mkdir -p compiled_images
          if [[ "$TUNNEL" == "all" ]]; then
            for t in openclash-passwall openclash passwall no-tunnel; do
              echo "Compiling with VPN Client: $t"
              if [ "$CLEAN" == "true" ]; echo "Start 'make clean' before building images."; then make clean; fi
              time bash make-build.sh $PROFILE $t
              rm -rf bin/targets/"$TARGET_SYSTEM"/*.{json,manifest,bin,*-rootfs*,*factory*,sha256sums}
              for file in bin/targets/"$TARGET_SYSTEM"/*-"$TARGET_NAME"-*.img.gz; do mv "$file" compiled_images/RTA-WRT_$(basename "$file" .img.gz)$( echo "_$t" ).img.gz; done
            done
          elif [[ "$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall" || "$TUNNEL" == "openclash" || "$TUNNEL" == "no-tunnel" ]]; then
            echo "Compiling with VPN Client: $TUNNEL"
            bash make-build.sh $PROFILE $TUNNEL
            rm -rf bin/targets/"$TARGET_SYSTEM"/*.{json,manifest,bin,*-rootfs*,*factory*,sha256sums}
            for file in bin/targets/"$TARGET_SYSTEM"/*-"$TARGET_NAME"-*.img.gz; do mv "$file" compiled_images/RTA-WRT_$(basename "$file" .img.gz)$( echo "_$TUNNEL" ).img.gz; done
          fi
          ls -l compiled_images
          echo "RELEASE_TAG=$PROFILE-$BASE-$BRANCH-$DATEMONTH" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Upload All Firmware to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.WORKING_DIR }}/compiled_images//*

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.WORKING_DIR }}/compiled_images//*
          tag: ${{ env.BRANCH }}-${{ env.DATE }}
          release_name: "RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }}"
          overwrite: true
          prerelease: ${{ env.PRE_RELEASE }}
          make_latest: true
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/${{ env.BRANCH }}-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT OpenWrt ${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)

  update-readme:
    needs: Generate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update README.md
        run: |
          DATE="$(date +'%Y%m%d')"
          if [ "$BRANCH" == "snapshots" ]; then
            sed -i -E "s|Build_Snapshots-[0-9]{8}-blue|Build_Snapshots-$DATE-blue|g" README.md
            sed -i -E "s|snapshots-[0-9]{8}|snapshots-$DATE|g" README.md
          else
            sed -i -E "s|Build_Latest-[0-9]{8}-blue|Build_Latest-$DATE-blue|g" README.md
            sed -i -E "s|23.05.4-[0-9]{8}|23.05.4-$DATE|g" README.md
          fi
      
      - name: Commit changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "Auto Update $(date +'%Y-%m-%d %H:%M:%S')"
          git push

  stale:
    needs: update-readme
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v7.0.0
        with:
          stale-issue-message: "Stale Issue"
          stale-pr-message: "Stale PR"
          stale-issue-label: "no-issue-activity"
          exempt-issue-labels: "awaiting-approval,awaiting,work-in-progress"
          stale-pr-label: "no-pr-activity"
          exempt-pr-labels: "awaiting-approval,awaiting,work-in-progress"
          # only-labels: 'bug,enhancement'
          days-before-issue-stale: 10
          days-before-pr-stale: 10
          days-before-issue-close: 5
          days-before-pr-close: -1
          operations-per-run: 500

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
