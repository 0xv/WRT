name: Generate RTA-WRT OPHUB Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: false
        default: "all-device"
        type: choice
        options:
          - all-device
          - s905
          - s905-beelink-mini
          - s905-mxqpro-plus
          - s905w
          - s905w-w95
          - s905w-x96-mini
          - s905w-x96w
          - s905x
          - s905x-b860h
          - s905x-nexbox-a95x
          - s905x2
          - s905x2-km3
          - s905x2-x96max-2g
          - s905x3
          - s905x3-h96max
          - s905x3-hk1
          - s905x3-x96max
          - s912
          - s912-h96pro-plus
          - s912-x92
      tunnel:
        description: "Select VPN Client app:"
        required: true
        default: "all-tunnel"
        type: choice
        options:
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - all-tunnel
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean

env:
  TZ: Asia/Jakarta
  WORKING_DIR: imagebuilder
  DEBIAN_FRONTEND: noninteractive
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TARGET: ${{ inputs.target }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}

jobs:
  prebuild:
    runs-on: ubuntu-22.04
    name: ${{ inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
      type: ${{ steps.setuprelease.outputs.type }}
      base: ${{ steps.setuprelease.outputs.base }}
      branch: ${{ steps.setuprelease.outputs.branch }}
      verop: ${{ steps.setuprelease.outputs.verop }}
      download_base: ${{ steps.setuprelease.outputs.download_base }}
      date: ${{ steps.setuprelease.outputs.date }}
      datetime: ${{ steps.setuprelease.outputs.datetime }}
      datemonth: ${{ steps.setuprelease.outputs.datemonth }}
      release_name: ${{ steps.setuprelease.outputs.release_name }}
      release_tag: ${{ steps.setuprelease.outputs.release_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set Matrix Run
        id: set-matrix
        run: |
          echo "Selected target option: [ ${{ inputs.target }} ]"
          TARGET_JSON=$(cat << 'EOJ'
          {
            "target": [
              "s905",
              "s905-beelink-mini",
              "s905-mxqpro-plus",
              "s905w",
              "s905w-w95",
              "s905w-x96-mini",
              "s905w-x96w",
              "s905x",
              "s905x-b860h",
              "s905x-nexbox-a95x",
              "s905x2",
              "s905x2-km3",
              "s905x2-x96max-2g",
              "s905x3",
              "s905x3-h96max",
              "s905x3-hk1",
              "s905x3-x96max",
              "s912",
              "s912-h96pro-plus",
              "s912-x92"
            ]
          }
          EOJ
          )

          if [ "${{ inputs.target }}" == "all-device" ]; then
            echo "target=$(echo "$TARGET_JSON" | jq -c '.target')" >> $GITHUB_OUTPUT
          else
            echo "target=$(jq -nc --arg d "${{ inputs.target }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

          echo "Selected tunnel option: [ ${{ inputs.tunnel }} ]"

      - name: Setup Release Environment
        id: setuprelease
        run: |
          sudo timedatectl set-timezone "${{ env.TZ }}"

          TYPE="OPHUB"
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT

          BASE="${RELEASE_BRANCH%:*}"
          BRANCH="${RELEASE_BRANCH#*:}"
          VEROP="$(echo "${BRANCH}" | awk -F. '{print $1"."$2}')"

          echo "BASE=$BASE" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "VEROP=$VEROP" >> $GITHUB_OUTPUT
          echo "DOWNLOAD_BASE=https://downloads.${BASE}.org" >> $GITHUB_OUTPUT

          DATE=$(date +'%d%m%Y')
          DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')
          DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')

          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "DATETIME=$DATETIME" >> $GITHUB_OUTPUT
          echo "DATEMONTH=$DATEMONTH" >> $GITHUB_OUTPUT

          if [ "${BASE}" == "openwrt" ]; then
            RELEASE_NAME="RTA-WRT_OPHUB-OpenWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-ophub-openwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          else
            RELEASE_NAME="RTA-WRT_OPHUB-ImmortalWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-ophub-immortalwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.setuprelease.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.setuprelease.outputs.release_tag }}
          name: ${{ steps.setuprelease.outputs.release_name }}
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # 🚀 RTA-WRT - Release Information

            ## 📥 Download Statistics
            ![GitHub Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${{ steps.setuprelease.outputs.release_tag }}/total?style=for-the-badge&logo=Openwrt)

            ## 📢 Support Channels
            [![Channel](https://img.shields.io/badge/Telegram-Channel-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/rtawrt)
            [![Group](https://img.shields.io/badge/Telegram-Group-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/backup_rtawrt)
            [![Personal](https://img.shields.io/badge/Telegram-Personal-%23059dfa?style=for-the-badge&logo=Telegram)](https://t.me/RizkiKotet)

            ## NOTES
            `Amlogic s905x Support Mod SDCard`

            ## 📝 Changelog Firmware
            [**Changelog Firmware**](https://github.com/rizkikotet-dev/RTA-WRT/blob/main/CHANGELOG.md "**Changelog Firmware**")
          generate_release_notes: true

  build-firmware:
    name: Build ${{ matrix.target }} Firmware
    needs: prebuild
    runs-on: ubuntu-22.04
    env:
      TYPE: ${{ needs.prebuild.outputs.type }}
      BASE: ${{ needs.prebuild.outputs.base }}
      BRANCH: ${{ needs.prebuild.outputs.branch }}
      VEROP: ${{ needs.prebuild.outputs.verop }}
      DOWNLOAD_BASE: ${{ needs.prebuild.outputs.download_base }}
      DATE: ${{ needs.prebuild.outputs.date }}
      DATETIME: ${{ needs.prebuild.outputs.datetime }}
      DATEMONTH: ${{ needs.prebuild.outputs.datemonth }}
      RELEASE_NAME: ${{ needs.prebuild.outputs.release_name }}
      RELEASE_TAG: ${{ needs.prebuild.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prebuild.outputs.target) }}

    steps:
      - name: Initialization environment
        id: init
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${{ env.TZ }}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          MATRIXTARGET="${{ matrix.target }}"
          echo "MATRIXTARGET=$MATRIXTARGET" >> $GITHUB_ENV

          # Target system configurations
          echo "PROFILE=generic" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
          echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV

          KERNEL="5.15.y_6.1.y"
          echo "KERNEL=$KERNEL" >> $GITHUB_ENV

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download and Prepare Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          # Determine archive extension based on version
          CURVER=$(echo "${BRANCH}" | cut -d'.' -f1)
          archive_ext=$([ "${CURVER}" == "24" ] && echo "tar.zst" || echo "tar.xz")

          # Download image builder
          RELEASE="${DOWNLOAD_BASE}/releases/${BRANCH}/targets/${TARGET_SYSTEM}/${BASE}-imagebuilder-${BRANCH}-${TARGET_NAME}.Linux-x86_64.${archive_ext}"
          echo "Downloading from: $RELEASE"
          wget --progress=dot:giga "$RELEASE"

          # Extract archive based on extension
          case "${archive_ext}" in
            tar.xz)
              tar -xJf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.xz
              ;;
            tar.zst)
              tar --use-compress-program=unzstd -xf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.zst
              ;;
          esac

          # Setup working directory
          mv *-imagebuilder-* ${WORKING_DIR}
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/${WORKING_DIR}

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Customizations
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          ./scripts/TUNNEL.sh ${{ env.TUNNEL }}

          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build Firmware Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          mkdir -p compiled_images
          chmod +x make-image.sh

          # Clean if requested
          if [ "${CLEAN}" == "true" ]; then
            make clean
          fi
            
          # Build image
          time ./make-image.sh ${PROFILE} ${{ env.TUNNEL }}
            
          # Move and rename output files
          for file in bin/targets/"${TARGET_SYSTEM}"/*-rootfs.tar.gz; do
            if [ -f "$file" ]; then
              new_name="RTA-WRT_$(basename "$file" -rootfs.tar.gz)_${{ env.TUNNEL }}-rootfs.tar.gz"
              mv "$file" compiled_images/$new_name
            fi
          done

          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Repack OpenWrt
        id: repack
        if: steps.build.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/REPACKWRT.sh
          ./scripts/REPACKWRT.sh "ophub" "$MATRIXTARGET" "$KERNEL" "${{ env.TUNNEL }}"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Mod SDCard
        id: modsdcard
        if: steps.repack.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/MODSDCARD.sh
          ./scripts/MODSDCARD.sh
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Before Upload
        id: beforeupload
        if: steps.modsdcard.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          for file in "${WORKING_DIR}"/compiled_images/*.img.gz; do
            if [ -f "$file" ]; then
              new_name="RTA-WRT_$(basename "$file" .img.gz)_${{ env.TUNNEL }}.img.gz"
              mv "$file" compiled_images/$new_name
            fi
          done
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.beforeupload.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: ${WORKING_DIR}/compiled_images/*.img.gz
          prerelease: ${{ github.ref_name == 'dev' }}
