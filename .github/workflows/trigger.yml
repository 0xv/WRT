name: Trigger Build

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
jobs:
  trigger-and-wait:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Amlogic OpenClash
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "openclash"
            }

      - name: Trigger Amlogic Passwall
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "passwall"
            }

      - name: Trigger Amlogic Nikki
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "nikki"
            }

      - name: Trigger Amlogic OpenClash Passwall
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "openclash-passwall"
            }

      - name: Trigger Amlogic Nikki Passwall
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "nikki-passwall"
            }

      - name: Trigger Amlogic Nikki OpenClash
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "nikki-openclash"
            }

      - name: Trigger Amlogic All Tunnel
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "openclash-passwall-nikki"
            }

      - name: Trigger Amlogic No Tunnel
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "no-tunnel"
            }

      - name: Trigger All ULO
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-openwrt.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "all"
            }

      - name: Trigger All Non Amlogic
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: "rizkikotet-dev/RTA-WRT"
          workflow_id: "generate-openwrt.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "all"
            }

      - name: Notify Telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          THREAD_ID_UPDATE: 734
        run: |
          # Handle termination signal
          trap "exit" SIGTERM

          create_stable_message() {
            cat << 'EOF'
            ━━━━━━━━━━━━━━━━━━━━━━
            🎯 *RTA-WRT Firmware Update*
            ✅ _Stable Release_

            🔹 *Versi:* ${{ inputs.release_branch }}
            🔹 *Tanggal:* $(date "+%d-%m-%Y %H:%M:%S")

            📌 *Catatan:*
            📢 Versi Stabil Telah Diterbitkan!
            • Disarankan untuk semua pengguna
            • Hasil merge dari branch Development
            • Includes fitur baru dan perbaikan bug
            • Update ke versi terbaru untuk mendapatkan semua fitur
            ━━━━━━━━━━━━━━━━━━━━━━
            EOF
          }

          create_dev_message() {
            cat << 'EOF'
            ━━━━━━━━━━━━━━━━━━━━━━
            🚀 *RTA-WRT Firmware Update*
            🌟 _Development Release_

            🔹 *Versi:* ${{ inputs.release_branch }}
            🔹 *Tanggal:* $(date "+%d-%m-%Y %H:%M:%S")

            📌 *Catatan:*
            📢 Versi Development:
            • Cocok untuk pengujian pada perangkat test
            • Silakan mencoba dan berikan feedback
            • Laporkan bug atau error yang ditemukan
            • Feedback Anda membantu pengembangan firmware
            ━━━━━━━━━━━━━━━━━━━━━━
            EOF
          }

          # Process branch information
          BRANCH_TAG=$(echo "${{ inputs.release_branch }}" | tr ':' '_')
          OPEWRT="${{ inputs.release_branch }}"
          OP_SOURCE="${OPEWRT%:*}"

          # Define download buttons
          BUTTONS='[
            [
              {
                "text": "📥 Download Via Releases",
                "url": "https://github.com/rtaserver/RTA-WRT/releases"
              }
            ],
            [
              {
                "text": "📥 Download Via Mirror",
                "url": "https://rizkikotet-dev.github.io/posts/firmware-openwrt/#-download"
              }
            ]
          ]'

          # Set image URL based on OpenWrt source
          if [ "$OPENWRT_SOURCE" = "immortalwrt" ]; then
            IMGURL="https://avatars.githubusercontent.com/u/53193414?s=200&v=4"
          else
            IMGURL="https://avatars.githubusercontent.com/u/2528830?s=200&v=4"
          fi

          # Select message template based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            TELEMSG=$(create_stable_message)
          else
            TELEMSG=$(create_dev_message)
          fi

          # Send Telegram message
          curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto" \
            -d "chat_id=$CHAT_ID" \
            -d "photo=$IMGURL" \
            -d "caption=$TELEMSG" \
            -d "parse_mode=Markdown" \
            -d "message_thread_id=$THREAD_ID_UPDATE" \
            -d "reply_markup={\"inline_keyboard\":$BUTTONS}"
