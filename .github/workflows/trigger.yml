name: Trigger Build

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.0"
        type: choice
        options:
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
      build_type:
        description: "Select build type:"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - amlogic-only
          - non-amlogic-only
          - ulo-only

env:
  REPO_NAME: "rizkikotet-dev/RTA-WRT"
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  CHAT_ID: ${{ secrets.CHAT_ID }}
  THREAD_ID_UPDATE: 734

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Delete Old Workflows
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: ${{ env.REPO_NAME }}
          workflow_id: "delete-old-workflow-run.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"

  build-amlogic:
    needs: prepare
    if: ${{ inputs.build_type == 'all' || inputs.build_type == 'amlogic-only' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tunnel:
          [
            "openclash",
            "passwall",
            "nikki",
            "openclash-passwall",
            "nikki-passwall",
            "nikki-openclash",
            "openclash-passwall-nikki",
            "no-tunnel",
          ]
    steps:
      - name: Build Amlogic Variant
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: ${{ env.REPO_NAME }}
          workflow_id: "generate-amlogic.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "${{ matrix.tunnel }}"
            }

  build-ulo:
    needs: prepare
    if: ${{ inputs.build_type == 'all' || inputs.build_type == 'ulo-only' }}
    runs-on: ubuntu-latest
    steps:
      - name: Build ULO Variants
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: ${{ env.REPO_NAME }}
          workflow_id: "generate-ulo.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "all"
            }

  build-non-amlogic:
    needs: prepare
    if: ${{ inputs.build_type == 'all' || inputs.build_type == 'non-amlogic-only' }}
    runs-on: ubuntu-latest
    steps:
      - name: Build Non-Amlogic Variants
        uses: dragoscops/workflow-trigger-wait@v3
        with:
          credentials: |
            {
              "token": "${{ secrets.GITHUB_TOKEN }}"
            }
          repo: ${{ env.REPO_NAME }}
          workflow_id: "generate-openwrt.yml"
          ref: "${{ github.ref_name }}"
          action: "trigger-and-wait"
          inputs: |
            {
              "release_branch": "${{ inputs.release_branch }}",
              "target": "all",
              "tunnel": "all"
            }

  notify:
    needs: [build-amlogic, build-ulo, build-non-amlogic]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Message Content
        id: message
        run: |
          # Extract OpenWrt source and version
          BRANCH_INFO="${{ inputs.release_branch }}"
          SOURCE="${BRANCH_INFO%:*}"
          VERSION="${BRANCH_INFO#*:}"

          # Set image URL based on source
          if [ "$SOURCE" = "immortalwrt" ]; then
            echo "image_url=https://avatars.githubusercontent.com/u/53193414?s=200&v=4" >> $GITHUB_OUTPUT
          else
            echo "image_url=https://avatars.githubusercontent.com/u/2528830?s=200&v=4" >> $GITHUB_OUTPUT
          fi

          # Generate message based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            cat << EOF > message.txt
            ━━━━━━━━━━━━━━━━━━━━━━
            🎯 *RTA-WRT Firmware Update*
            ✅ _Stable Release_
            
            🔹 *Source:* ${SOURCE}
            🔹 *Version:* ${VERSION}
            🔹 *Date:* $(date "+%d-%m-%Y %H:%M:%S")
            🔹 *Build Type:* ${{ inputs.build_type }}
            
            📌 *Release Notes:*
            • Stable version release
            • Recommended for all users
            • Includes latest features and bug fixes
            • Please update to get all new features
            ━━━━━━━━━━━━━━━━━━━━━━
            EOF
          else
            cat << EOF > message.txt
            ━━━━━━━━━━━━━━━━━━━━━━
            🚀 *RTA-WRT Firmware Update*
            🌟 _Development Release_
            
            🔹 *Source:* ${SOURCE}
            🔹 *Version:* ${VERSION}
            🔹 *Date:* $(date "+%d-%m-%Y %H:%M:%S")
            🔹 *Build Type:* ${{ inputs.build_type }}
            
            📌 *Development Notes:*
            • Suitable for testing
            • Please provide feedback
            • Report any bugs found
            • Your feedback helps development
            ━━━━━━━━━━━━━━━━━━━━━━
            EOF
          fi

          echo "message=$(cat message.txt)" >> $GITHUB_OUTPUT

      - name: Send Telegram Notification
        if: success()
        run: |
          BUTTONS='[
            [{"text": "📥 Download Via Releases", "url": "https://github.com/rtaserver/RTA-WRT/releases"}],
            [{"text": "📥 Download Via Mirror", "url": "https://rizkikotet-dev.github.io/posts/firmware-openwrt/#-download"}]
          ]'

          curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendPhoto" \
            -d "chat_id=${{ env.CHAT_ID }}" \
            -d "photo=${{ steps.message.outputs.image_url }}" \
            -d "caption=${{ steps.message.outputs.message }}" \
            -d "parse_mode=Markdown" \
            -d "message_thread_id=${{ env.THREAD_ID_UPDATE }}" \
            -d "reply_markup={\"inline_keyboard\":$BUTTONS}"
