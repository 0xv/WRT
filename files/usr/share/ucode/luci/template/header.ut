{#
 Copyright 2022 Jo-Philipp Wich <jo@mein.io>
 Licensed to the public under the Apache License 2.0.
-#}
{%
	include(`themes/${theme}/header`);
-%}
<script src="{{ resource }}/luci.js?v=25.017.24510~d42ec55"></script>
<script src="{{ resource }}/sweetalert2.all.min.js"></script>
<script>
	L = new LuCI({{ replace(`${ {
		media          : media,
		resource       : resource,
		scriptname     : http.getenv("SCRIPT_NAME"),
		pathinfo       : http.getenv("PATH_INFO"),
		documentroot   : http.getenv("DOCUMENT_ROOT"),
		requestpath    : ctx.request_path,
		dispatchpath   : ctx.path,
		pollinterval   : +config.main.pollinterval || 5,
		ubuspath       : config.main.ubuspath || '/ubus/',
		sessionid      : ctx.authsession,
		token          : ctx.authtoken,
		nodespec       : dispatched,
		apply_rollback : max(+config.apply.rollback ||  90, 90),
		apply_holdoff  : max(+config.apply.holdoff  ||   4,  1),
		apply_timeout  : max(+config.apply.timeout  ||   5,  1),
		apply_display  : max(+config.apply.display  || 1.5,  1),
		rollback_token : rollback_token
	} }`, '/', '\\/') }});
</script>
<style>
    .update-info {
        text-align: left;
        margin: 15px 0;
        font-family: Arial, sans-serif;
    }
    .update-info p {
        margin: 8px 0;
        color: #333;
    }
    
    .changelog {
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #333;
        line-height: 1.6;
        margin-top: 20px;
        padding: 10px;
        border-left: 4px solid #007BFF;
        max-height: 250px;
        overflow-y: auto;
        border-radius: 5px;
    }
    .changelog pre {
        font-family: 'Courier New', monospace;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 14px;
        line-height: 1.5;
    }
    .swal2-popup {
        font-family: Arial, sans-serif;
        max-width: 600px;
    }
    .swal2-title {
        font-size: 1.6em;
        margin-bottom: 15px;
        color: #007BFF;
        background-color: #FFFFFF;
        background: #FFFFFF;
    }
    
    .swal2-html-container {
        background-color: #FFFFFF;
        background: #FFFFFF;
    }
    .swal2-html-container a {
        text-decoration: none;
        color: #007BFF;
    }
    .swal2-html-container a:hover {
        text-decoration: underline;
    }
    .square-wrapper {
        position: fixed;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1000;
    }
    .square {
        border: 1px solid #5e42a6;
        height: 26px;
        width: 26px;
        display: block;
        transform: rotate(45deg);
        overflow: hidden;
        cursor: pointer;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square .burgerwrap {
        height: 18px;
        width: 21px;
        transform: rotate(-45deg);
        padding-left: 2px;
        padding-top: 8px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square:hover {
        transform: rotate(135deg);
        border: 1px solid rgb(61, 14, 230);
    }
    .square:hover .burgerwrap {
        transform: rotate(-135deg);
    }
    .square span {
        height: 2px;
        width: 14px;
        background: linear-gradient(145deg, #5e42a6, #b46be4);
        display: block;
        margin-bottom: 2px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square span:after {
        content: "";
        height: 2px;
        width: 14px;
        position: absolute;
        background: rgb(61, 14, 230);
        left: -22px;
        margin-top: -4px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square:hover span {
        margin-left: 26px;
    }
    .square:hover span:after {
        left: 0.2px;
    }
    .square span:nth-of-type(1),
    .square span:nth-of-type(1):after {
        transition-delay: 0.1s;
    }
    .square span:nth-of-type(2),
    .square span:nth-of-type(2):after {
        transition-delay: 0.2s;
    }
    .square span:nth-of-type(3),
    .square span:nth-of-type(3):after {
        transition-delay: 0.3s;
    }
</style>

<script>

// ====== Global Configuration ======
const CONFIG = {
    APP: {
        name: 'RTA-WRT',
        checkInterval: 15 * 60 * 1000, // 15 menit
        cacheExpiration: 24 * 60 * 60 * 1000 // 24 jam
    },
    SOCIAL: {
        channel: 'https://t.me/rtawrt',
        group: 'https://t.me/backup_rtawrt',
        personal: 'https://t.me/RizkiKotet'
    },
    STORAGE_KEYS: {
        MODAL_KEY: 'mdl_Saweria'
    }
};

// ====== Utility Functions ======
const debounce = (func, wait) => {
    let timeout;
    return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
    };
};

// ====== Storage Manager ======
class StorageManager {
    static #memoryCache = new Map();

    static save(key, value) {
        try {
            this.#memoryCache.set(key, value);
            localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
            console.warn(`Storage error: ${error}`);
        }
    }

    static get(key) {
        if (this.#memoryCache.has(key)) {
            return this.#memoryCache.get(key);
        }
        const value = localStorage.getItem(key);
        if (value) {
            const parsedValue = JSON.parse(value);
            this.#memoryCache.set(key, parsedValue);
            return parsedValue;
        }
        return null;
    }

    static remove(key) {
        this.#memoryCache.delete(key);
        localStorage.removeItem(key);
    }
}

// ====== Alert System ======
class AlertSystem {
    static async showAlert(config) {
        try {
            await Swal.fire(config);
        } catch (error) {
            console.warn('Alert error:', error);
        }
    }
}

// ====== Profile Manager ======
function showProfile() {
    AlertSystem.showAlert({
        width: 400,
        title: "About Me!",
        text: "Halo! Saya Rizki Kotet, seorang programmer pemula yang belajar C# dan PHP...",
        imageUrl: "{{ resource }}/Profile.jpeg",
        imageWidth: 200,
        imageHeight: 200,
        imageAlt: "Profile",
        allowOutsideClick: false,
        footer: `
            <p style="text-align: center;">
                <a href="${CONFIG.SOCIAL.channel}"><img alt="Channel" src="{{ resource }}/Channel.svg" width="110" height="30"></a>
                <a href="${CONFIG.SOCIAL.group}"><img alt="Group" src="{{ resource }}/Group.svg" width="110" height="30"></a>
                <a href="${CONFIG.SOCIAL.personal}"><img alt="Personal" src="{{ resource }}/Personal.svg" width="110" height="30"></a>
            </p>
        `
    });
}

// ====== Daily Modal Manager ======
class DailyModalManager {
    static async showDailyModal() {
        const today = new Date().toDateString();
        if (StorageManager.get(CONFIG.STORAGE_KEYS.MODAL_KEY) === today) return;

        await AlertSystem.showAlert({
            title: `ðŸš€ Welcome To ${CONFIG.APP.name}`,
            width: 400,
            imageUrl: "{{ resource }}/Saweria.png",
            imageWidth: 200,
            imageHeight: 200,
            imageAlt: "Saweria",
            html: `
                <p style="text-align: center;">
                    <a href="${CONFIG.SOCIAL.channel}" target="_blank"><img alt="Channel" src="{{ resource }}/Channel.svg" width="110" height="20"></a>
                    <a href="${CONFIG.SOCIAL.group}" target="_blank"><img alt="Group" src="{{ resource }}/Group.svg" width="110" height="20"></a>
                    <a href="${CONFIG.SOCIAL.personal}" target="_blank"><img alt="Personal" src="{{ resource }}/Personal.svg" width="110" height="20"></a>
                </p>
                <div style="margin-top: 10px; text-align: center;">
                    <input type="checkbox" id="noShowToday">
                    <label for="noShowToday">Jangan tampilkan lagi hari ini</label>
                </div>
            `,
            confirmButtonText: 'OK',
            allowOutsideClick: false,
            didOpen: () => {
                document.getElementById('noShowToday').addEventListener('change', event => {
                    if (event.target.checked) {
                        StorageManager.save(CONFIG.STORAGE_KEYS.MODAL_KEY, today);
                    } else {
                        StorageManager.remove(CONFIG.STORAGE_KEYS.MODAL_KEY);
                    }
                });
            }
        });
    }
}

// ====== Application Controller ======
class AppController {
    static async initialize() {
        await DailyModalManager.showDailyModal();
    }
}

// ====== Initialize Application ======
document.addEventListener('DOMContentLoaded', () => AppController.initialize());

</script>

<div class="square-wrapper">
    <div class="square" onclick="showProfile()">
        <div class="burgerwrap">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </div>
</div>