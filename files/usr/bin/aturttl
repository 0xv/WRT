#!/bin/bash

# Author: RizkiKotet
# By: https://github.com/rtaserver | https://github.com/rizkikotet-dev

setup_colors() {
    PURPLE="\033[95m"
    BLUE="\033[94m"
    GREEN="\033[92m"
    YELLOW="\033[93m"
    RED="\033[91m"
    MAGENTA='\033[0;35m'
    CYAN='\033[0;36m'
    RESET="\033[0m"

    STEPS="[${PURPLE} STEPS ${RESET}]"
    INFO="[${BLUE} INFO ${RESET}]"
    SUCCESS="[${GREEN} SUCCESS ${RESET}]"
    WARNING="[${YELLOW} WARNING ${RESET}]"
    ERROR="[${RED} ERROR ${RESET}]"

    # Formatting
    CL=$(echo "\033[m")
    UL=$(echo "\033[4m")
    BOLD=$(echo "\033[1m")
    BFR="\\r\\033[K"
    HOLD=" "
    TAB="  "
}

spinner() {
  local frames=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
  local colors=("\033[31m" "\033[33m" "\033[32m" "\033[36m" "\033[34m" "\033[35m" "\033[91m" "\033[92m" "\033[93m" "\033[94m")
  local spin_i=0
  local color_i=0
  local interval=0.1

  printf "\e[?25l"

  while true; do
    local color="${colors[color_i]}"
    printf "\r ${color}%s${CL}" "${frames[spin_i]}"

    spin_i=$(( (spin_i + 1) % ${#frames[@]} ))
    color_i=$(( (color_i + 1) % ${#colors[@]} ))

    sleep "$interval"
  done
}

setup_colors
if ! opkg list-installed | grep -q "coreutils-sleep"; then
    echo -e "${WARNING} Package coreutils-sleep is not installed. Installing it now..."
    if ! opkg update && opkg install sexpect >/dev/null 2>&1; then
        echo -e "${RED}Gagal mengupdate repository. Keluar...${RESET}"
        exit 1
    fi
    echo -e "${SUCCESS} Package coreutils-sleep telah terinstall...${RESET}"
fi

format_time() {
  local total_seconds=$1
  local hours=$((total_seconds / 3600))
  local minutes=$(( (total_seconds % 3600) / 60 ))
  local seconds=$((total_seconds % 60))
  printf "%02d:%02d:%02d" $hours $minutes $seconds
}

cmdinstall() {
    local cmd="$1"
    local desc="${2:-$cmd}"

    echo -ne "${TAB}${HOLD}${INFO} ${desc}${HOLD}"
    spinner &
    SPINNER_PID=$!
    local start_time=$(date +%s)
    local output=$($cmd 2>&1)
    local exit_code=$?
    local end_time=$(date +%s)
    local elapsed_time=$((end_time - start_time))
    local formatted_time=$(format_time $elapsed_time)

    if [ $exit_code -eq 0 ]; then
        if [ -n "$SPINNER_PID" ] && ps | grep $SPINNER_PID > /dev/null; then kill $SPINNER_PID > /dev/null; fi
        printf "\e[?25h"
        echo -e "${BFR}${SUCCESS} ${desc} ${BLUE}[$formatted_time]${RESET}"
    else
        if [ -n "$SPINNER_PID" ] && ps | grep $SPINNER_PID > /dev/null; then kill $SPINNER_PID > /dev/null; fi
        printf "\e[?25h"
        echo -e "${BFR}${ERROR} ${desc} ${BLUE}[$formatted_time]${RESET}"
        echo "$output"
        exit 1
    fi
}

# Banner
show_banner() {
    echo -e "${BLUE}════════════════════════════════════════════════════════════${RESET}"
    echo -e "${CYAN}"
    echo '██████╗ ████████╗ █████╗ ██╗    ██╗██████╗ ████████╗'
    echo '██╔══██╗╚══██╔══╝██╔══██╗██║    ██║██╔══██╗╚══██╔══╝'
    echo '██████╔╝   ██║   ███████║██║ █╗ ██║██████╔╝   ██║   '
    echo '██╔══██╗   ██║   ██╔══██║██║███╗██║██╔══██╗   ██║   '
    echo '██║  ██║   ██║   ██║  ██║╚███╔███╔╝██║  ██║   ██║   '
    echo '╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝ ╚══╝╚══╝ ╚═╝  ╚═╝   ╚═╝   '
    echo -e "${RESET}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════${RESET}"
}

# Fungsi untuk menampilkan semua interface yang tersedia
show_interfaces() {
    echo -e "${YELLOW}Daftar Interface yang tersedia:${RESET}"
    echo -e "${BLUE}--------------------------------${RESET}"
    ip link show | grep -E '^[0-9]+:' | cut -d: -f2 | sed 's/^ //' | while read -r interface; do
        echo -e "${GREEN}$interface${RESET}"
    done
    echo -e "${BLUE}--------------------------------${RESET}"
}

# Fungsi untuk memvalidasi interface
validate_interface() {
    local interface="$1"
    ip link show "$interface" >/dev/null 2>&1
    return $?
}

# Fungsi untuk set TTL rules
set_ttl() {
    local INTERFACE="$1"
    local TTL_VALUE="$2"

    echo -e "${YELLOW}Menerapkan TTL rules untuk interface ${GREEN}$INTERFACE${YELLOW} dengan nilai TTL ${GREEN}$TTL_VALUE${RESET}"
    cmdinstall "nft add rule inet fw4 mangle_prerouting iifname $INTERFACE ip ttl set $TTL_VALUE" "Menambahkan Prerouting"
    cmdinstall "nft add rule inet fw4 mangle_postrouting oifname $INTERFACE ip ttl set $TTL_VALUE" "Menambahkan Postrouting"
    cmdinstall "/etc/init.d/firewall restart" "Restart Firewall"
    echo -e "${GREEN}Rules berhasil diterapkan!${RESET}"
}

# Fungsi untuk delete TTL rules
delete_ttl() {
    local INTERFACE="$1"
    
    echo -e "${YELLOW}Mencari dan menghapus rules TTL untuk interface ${GREEN}$INTERFACE${YELLOW}...${RESET}"
    
    # Hapus rules di prerouting
    nft -a list chain inet fw4 mangle_prerouting | grep "ttl set" | grep "$INTERFACE" | while read -r line; do
        handle=$(echo "$line" | grep -o 'handle [0-9]*' | cut -d' ' -f2)
        if [ ! -z "$handle" ]; then
            echo -e "${CYAN}Menghapus prerouting rule dengan handle ${GREEN}$handle${RESET}"
            cmdinstall "nft delete rule inet fw4 mangle_prerouting handle $handle"
        fi
    done

    # Hapus rules di postrouting
    nft -a list chain inet fw4 mangle_postrouting | grep "ttl set" | grep "$INTERFACE" | while read -r line; do
        handle=$(echo "$line" | grep -o 'handle [0-9]*' | cut -d' ' -f2)
        if [ ! -z "$handle" ]; then
            echo -e "${CYAN}Menghapus postrouting rule dengan handle ${GREEN}$handle${RESET}"
            cmdinstall "nft delete rule inet fw4 mangle_postrouting handle $handle"
        fi
    done
    
    cmdinstall "/etc/init.d/firewall restart" "Restart Firewall"
    echo -e "${GREEN}Proses penghapusan selesai!${RESET}"
}

# Lokasi file rc.local
RC_LOCAL="/etc/rc.local"

# Fungsi untuk menambahkan rules ke rc.local
add_to_startup() {
    local INTERFACE="$1"
    local TTL_VALUE="$2"
    
    # Cek apakah file rc.local ada
    if [ ! -f "$RC_LOCAL" ]; then
        echo "#!/bin/sh -e" > "$RC_LOCAL"
        echo "exit 0" >> "$RC_LOCAL"
        chmod +x "$RC_LOCAL"
    fi
    
    # Cek apakah sudah ada rules untuk interface ini
    grep -q "nft add rule inet fw4 mangle_prerouting iifname \"$INTERFACE\"" "$RC_LOCAL" || {
        sed -i "/exit 0/i nft add rule inet fw4 mangle_prerouting iifname \"$INTERFACE\" ip ttl set $TTL_VALUE\nnft add rule inet fw4 mangle_postrouting oifname \"$INTERFACE\" ip ttl set $TTL_VALUE" "$RC_LOCAL"
        echo -e "${GREEN}Rules TTL telah ditambahkan ke startup (rc.local)${RESET}"
    }
}

# Fungsi untuk menghapus rules dari rc.local
remove_from_startup() {
    local INTERFACE="$1"
    
    if [ -f "$RC_LOCAL" ]; then
        sed -i "/nft add rule inet fw4 mangle_prerouting iifname \"$INTERFACE\"/d" "$RC_LOCAL"
        sed -i "/nft add rule inet fw4 mangle_postrouting oifname \"$INTERFACE\"/d" "$RC_LOCAL"
        echo -e "${GREEN}Rules TTL untuk interface $INTERFACE telah dihapus dari startup (rc.local)${RESET}"
    fi
}

# Main menu
while true; do
    clear
    show_banner
    echo -e "${MAGENTA}    OpenWrt TTL Manager Script     ${RESET}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════${RESET}"
    echo -e "${CYAN}1. Set TTL Rules${RESET}"
    echo -e "${CYAN}2. Delete TTL Rules${RESET}"
    echo -e "${CYAN}3. Lihat rc.local${RESET}"
    echo -e "${CYAN}4. Keluar${RESET}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════${RESET}"
    echo -e -n "${YELLOW}Pilih menu (1-4): ${RESET}"
    read choice

    case $choice in
        1)
            clear
            show_banner
            echo -e "${MAGENTA}=== Set TTL Rules ===${RESET}"
            show_interfaces
            
            # Input dan validasi interface
            while true; do
                echo -e -n "${YELLOW}Masukkan nama interface: ${RESET}"
                read interface
                if validate_interface "$interface"; then
                    break
                else
                    echo -e "${RED}Interface tidak valid! Silakan coba lagi.${RESET}"
                fi
            done
            
            # Input dan validasi TTL dengan default 65
            echo -e -n "${YELLOW}Masukkan nilai TTL (1-255) [default: 65]: ${RESET}"
            read ttl_value
            if [ -z "$ttl_value" ]; then
                ttl_value=65
            fi
            
            while ! [[ "$ttl_value" =~ ^[0-9]+$ ]] || [ "$ttl_value" -lt 1 ] || [ "$ttl_value" -gt 255 ]; do
                echo -e "${RED}Nilai TTL tidak valid! Masukkan angka antara 1-255.${RESET}"
                echo -e -n "${YELLOW}Masukkan nilai TTL (1-255) [default: 65]: ${RESET}"
                read ttl_value
                if [ -z "$ttl_value" ]; then
                    ttl_value=65
                fi
            done
            
            # Konfirmasi
            echo ""
            echo -e "${CYAN}Anda akan menerapkan:${RESET}"
            echo -e "${WHITE}Interface: ${GREEN}$interface${RESET}"
            echo -e "${WHITE}TTL Value: ${GREEN}$ttl_value${RESET}"
            echo -e -n "${YELLOW}Lanjutkan? (y/n): ${RESET}"
            read confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                set_ttl "$interface" "$ttl_value"
                
                # Tanya apakah ingin menambahkan ke startup
                echo -e -n "${YELLOW}Tambahkan rules ini ke startup (rc.local)? (y/n): ${RESET}"
                read add_startup
                if [[ "$add_startup" =~ ^[Yy]$ ]]; then
                    add_to_startup "$interface" "$ttl_value"
                fi
            fi
            echo -e -n "${MAGENTA}Tekan Enter untuk kembali ke menu...${RESET}"
            read
            ;;
            
        2)
            clear
            show_banner
            echo -e "${MAGENTA}=== Delete TTL Rules ===${RESET}"
            show_interfaces
            
            # Input dan validasi interface
            while true; do
                echo -e -n "${YELLOW}Masukkan nama interface yang akan dihapus rules-nya: ${RESET}"
                read interface
                if validate_interface "$interface"; then
                    break
                else
                    echo -e "${RED}Interface tidak valid! Silakan coba lagi.${RESET}"
                fi
            done
            
            # Konfirmasi
            echo -e -n "${YELLOW}Anda yakin ingin menghapus TTL rules untuk interface ${GREEN}$interface${YELLOW}? (y/n): ${RESET}"
            read confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                delete_ttl "$interface"
                
                # Tanya apakah ingin menghapus dari startup
                echo -e -n "${YELLOW}Hapus rules ini dari startup (rc.local)? (y/n): ${RESET}"
                read remove_startup
                if [[ "$remove_startup" =~ ^[Yy]$ ]]; then
                    remove_from_startup "$interface"
                fi
            fi
            echo -e -n "${MAGENTA}Tekan Enter untuk kembali ke menu...${RESET}"
            read
            ;;
            
        3)
            clear
            show_banner
            echo -e "${MAGENTA}=== Isi rc.local ===${RESET}"
            echo -e "${BLUE}════════════════════════════════════════════════════════════${RESET}"
            if [ -f "$RC_LOCAL" ]; then
                echo -e "${GREEN}"
                cat "$RC_LOCAL"
                echo -e "${RESET}"
            else
                echo -e "${RED}File rc.local tidak ditemukan${RESET}"
            fi
            echo -e "${BLUE}════════════════════════════════════════════════════════════${RESET}"
            echo -e -n "${MAGENTA}Tekan Enter untuk kembali ke menu...${RESET}"
            read
            ;;
            
        4)
            echo -e "${GREEN}Terima kasih telah menggunakan script ini!${RESET}"
            exit 0
            ;;
            
        *)
            echo -e "${RED}Pilihan tidak valid!${RESET}"
            echo -e -n "${MAGENTA}Tekan Enter untuk melanjutkan...${RESET}"
            read
            ;;
    esac
done